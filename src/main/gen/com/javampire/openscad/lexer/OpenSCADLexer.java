/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad.flex</tt>
 */
class OpenSCADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\60\1\34\1\57\1\26\1\45\1\61\1\0\1\51"+
    "\1\52\1\11\1\32\1\43\1\44\1\30\1\10\12\27\1\50\1\42\1\6\1\25\1\7\1\47\1\0"+
    "\4\26\1\31\25\26\1\55\1\33\1\56\1\46\1\26\1\0\1\35\1\26\1\22\1\14\1\17\1\20"+
    "\1\40\1\41\1\24\2\26\1\16\1\12\1\21\1\13\2\26\1\37\1\36\1\23\1\15\5\26\1\53"+
    "\1\62\1\54\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\3\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\10\1\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\2\1\3"+
    "\1\6\1\34\1\3\1\35\1\36\4\0\1\37\1\40"+
    "\1\41\1\42\12\1\1\43\1\1\1\44\1\1\1\11"+
    "\1\0\1\14\1\1\1\45\1\46\1\47\1\0\1\41"+
    "\5\0\1\42\1\50\3\1\1\51\2\1\1\52\4\1"+
    "\1\11\2\0\1\1\1\0\1\41\12\0\2\50\2\1"+
    "\1\0\1\53\1\54\1\55\2\1\1\56\1\1\1\11"+
    "\1\1\1\0\3\41\1\57\4\0\1\57\2\0\1\42"+
    "\1\0\1\1\1\60\1\1\1\61\2\1\3\0\1\57"+
    "\3\41\4\0\1\62\2\1\1\63\3\0\2\41\3\0"+
    "\2\1\2\0\2\41\3\0\1\64\1\0\1\65\2\0"+
    "\2\41\4\0\1\57\1\41\1\57\1\0\1\57\1\0"+
    "\1\41\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\377\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\377\0\u042f"+
    "\0\u0462\0\377\0\377\0\377\0\377\0\377\0\377\0\377"+
    "\0\377\0\377\0\377\0\377\0\377\0\377\0\377\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\377\0\377"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\377\0\377\0\u06c6\0\u06f9"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u0231\0\u092a\0\377\0\u095d\0\u0990\0\u09c3"+
    "\0\377\0\u09f6\0\377\0\377\0\377\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0693\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0231\0\u0c5a\0\u0c8d\0\u0231\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\377\0\u0fbd\0\u0ff0\0\u0ff0"+
    "\0\u1023\0\u1056\0\377\0\u1089\0\u10bc\0\u10ef\0\377\0\u0231"+
    "\0\u0231\0\u1122\0\u1155\0\u0231\0\u1188\0\u0dbf\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u0a5c\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\377\0\u1386\0\u13b9\0\377\0\u13ec\0\u141f\0\u0231\0\u1452"+
    "\0\u0231\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u0e58\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u0231\0\u16e9"+
    "\0\u171c\0\u0231\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u0231\0\u1ab2\0\377\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1254\0\u1c7d"+
    "\0\u1320\0\u1cb0\0\u151e\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\2\15\1\22\1\23\1\24"+
    "\1\15\1\25\1\26\1\15\1\27\1\6\1\30\1\31"+
    "\4\15\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\6\3\7\2\53\1\10\1\11\1\54"+
    "\1\13\1\14\2\15\1\16\1\17\1\20\1\21\2\15"+
    "\1\22\1\23\1\24\1\15\1\25\1\26\1\15\1\27"+
    "\1\6\1\30\1\31\4\15\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\55\5\56\1\57"+
    "\1\60\53\55\4\0\2\4\2\0\1\61\71\0\1\62"+
    "\1\0\1\63\3\0\1\64\121\0\5\7\102\0\1\65"+
    "\62\0\1\66\45\0\1\67\1\70\63\0\1\15\1\71"+
    "\11\15\1\0\2\15\1\0\1\15\3\0\5\15\33\0"+
    "\13\15\1\0\2\15\1\0\1\15\3\0\5\15\33\0"+
    "\7\15\1\72\3\15\1\0\2\15\1\0\1\15\3\0"+
    "\1\15\1\73\3\15\33\0\5\15\1\74\5\15\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\33\0\4\15\1\75"+
    "\6\15\1\0\2\15\1\0\1\15\3\0\1\76\4\15"+
    "\33\0\1\15\1\77\1\15\1\100\7\15\1\0\2\15"+
    "\1\0\1\15\3\0\1\101\4\15\33\0\13\15\1\0"+
    "\2\15\1\0\1\15\3\0\2\15\1\102\2\15\33\0"+
    "\6\15\1\103\1\104\3\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\46\0\1\105\47\0\5\15\1\106\5\15"+
    "\1\0\1\15\1\25\1\107\1\106\3\0\5\15\50\0"+
    "\1\107\33\0\33\30\1\110\1\111\26\30\12\0\13\15"+
    "\1\0\2\15\1\0\1\15\3\0\1\15\1\112\3\15"+
    "\46\0\1\113\116\0\1\114\63\0\1\115\1\0\3\7"+
    "\2\53\2\0\1\116\62\0\1\117\1\70\51\0\6\55"+
    "\2\0\54\55\5\56\2\0\53\55\10\0\1\120\70\0"+
    "\1\121\57\0\1\122\50\0\3\123\1\64\1\123\4\0"+
    "\13\124\1\0\2\124\1\0\1\124\3\0\5\124\21\0"+
    "\2\67\2\0\57\67\11\125\1\126\51\125\12\0\2\15"+
    "\1\127\10\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\33\0\2\15\1\130\10\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\33\0\5\15\1\131\5\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\33\0\11\15\1\132\1\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\33\0\13\15"+
    "\1\0\2\15\1\0\1\15\3\0\1\15\1\133\3\15"+
    "\33\0\10\15\1\134\2\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\33\0\13\15\1\0\2\15\1\0\1\15"+
    "\3\0\2\15\1\135\2\15\33\0\7\15\1\136\3\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\33\0\4\15"+
    "\1\137\6\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\33\0\3\15\1\140\7\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\33\0\10\15\1\141\2\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\33\0\13\15\1\0\1\15"+
    "\1\142\1\0\1\15\1\143\2\0\5\15\2\0\1\143"+
    "\35\0\1\144\7\0\1\107\1\0\1\144\31\0\63\30"+
    "\12\0\13\15\1\0\2\15\1\0\1\15\3\0\1\15"+
    "\1\145\3\15\31\0\1\146\52\0\1\117\1\147\1\150"+
    "\1\151\1\117\1\147\55\117\2\120\1\4\1\152\57\120"+
    "\15\0\1\153\71\0\1\154\37\0\1\155\1\156\1\155"+
    "\1\157\1\160\4\0\13\124\1\0\2\124\1\0\1\124"+
    "\3\0\5\124\21\0\11\125\1\161\51\125\10\162\1\163"+
    "\1\126\51\162\12\0\3\15\1\164\7\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\33\0\5\15\1\165\5\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\22\0\5\166"+
    "\1\167\3\0\13\15\1\0\2\15\1\0\1\15\3\0"+
    "\5\15\33\0\5\15\1\170\5\15\1\0\2\15\1\0"+
    "\1\15\3\0\5\15\33\0\13\15\1\0\2\15\1\0"+
    "\1\15\3\0\4\15\1\171\33\0\10\15\1\172\2\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\33\0\13\15"+
    "\1\0\2\15\1\0\1\15\3\0\1\15\1\173\3\15"+
    "\33\0\5\15\1\174\5\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\33\0\4\15\1\175\6\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\33\0\13\15\1\0\1\15"+
    "\1\142\1\0\1\15\3\0\5\15\50\0\1\176\62\0"+
    "\1\176\2\0\1\143\11\0\1\143\30\0\12\15\1\177"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\21\0\1\146"+
    "\1\200\1\150\1\151\1\146\1\200\55\146\1\117\1\147"+
    "\1\150\1\151\2\147\4\117\1\201\5\202\1\203\4\202"+
    "\1\204\2\202\1\117\1\202\3\117\5\202\21\117\1\0"+
    "\3\205\2\150\2\0\1\116\1\0\1\206\5\207\1\210"+
    "\4\207\1\211\2\207\1\0\1\207\3\0\5\207\22\0"+
    "\1\205\1\150\1\205\2\150\2\0\1\116\1\0\1\206"+
    "\5\207\1\210\4\207\1\211\2\207\1\0\1\207\3\0"+
    "\5\207\23\0\1\4\1\0\2\4\2\0\1\61\66\0"+
    "\1\212\71\0\1\213\42\0\1\155\60\0\1\155\1\156"+
    "\1\155\1\157\1\160\55\0\10\125\1\214\1\161\51\125"+
    "\11\162\1\215\51\162\12\0\4\15\1\216\6\15\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\33\0\6\15\1\217"+
    "\4\15\1\0\2\15\1\0\1\15\3\0\5\15\22\0"+
    "\5\166\1\167\66\0\11\15\1\220\1\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\33\0\5\15\1\221\5\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\33\0\3\15"+
    "\1\222\7\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\33\0\13\15\1\0\2\15\1\0\1\15\3\0\3\15"+
    "\1\223\1\15\21\0\1\146\1\200\1\150\1\151\2\200"+
    "\4\146\1\224\5\225\1\226\4\225\1\227\2\225\1\146"+
    "\1\225\3\146\5\225\21\146\1\117\1\147\1\150\1\151"+
    "\1\230\1\147\4\117\1\202\1\231\11\202\1\204\2\202"+
    "\1\117\1\202\3\117\5\202\22\117\1\147\1\150\1\151"+
    "\1\230\1\147\4\117\13\202\1\204\2\202\1\117\1\202"+
    "\3\117\5\202\22\117\1\147\1\150\1\151\1\230\1\147"+
    "\4\117\3\202\1\232\7\202\1\204\2\202\1\117\1\202"+
    "\3\117\5\202\21\117\1\0\5\205\17\0\1\211\36\0"+
    "\5\205\4\0\1\207\1\233\11\207\1\211\2\207\1\0"+
    "\1\207\3\0\5\207\22\0\5\205\4\0\13\207\1\211"+
    "\2\207\1\0\1\207\3\0\5\207\22\0\5\205\4\0"+
    "\3\207\1\234\7\207\1\211\2\207\1\0\1\207\3\0"+
    "\5\207\34\0\1\235\71\0\1\236\40\0\10\162\1\163"+
    "\1\215\51\162\12\0\5\15\1\237\5\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\33\0\12\15\1\240\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\33\0\2\15\1\241"+
    "\10\15\1\0\2\15\1\0\1\15\3\0\5\15\33\0"+
    "\7\15\1\242\3\15\1\0\2\15\1\0\1\15\3\0"+
    "\5\15\21\0\1\146\1\200\1\150\1\151\1\243\1\200"+
    "\4\146\1\225\1\244\11\225\1\227\2\225\1\146\1\225"+
    "\3\146\5\225\22\146\1\200\1\150\1\151\1\243\1\200"+
    "\4\146\13\225\1\227\2\225\1\146\1\225\3\146\5\225"+
    "\22\146\1\200\1\150\1\151\1\243\1\200\4\146\3\225"+
    "\1\245\7\225\1\227\2\225\1\146\1\225\3\146\5\225"+
    "\21\146\1\117\1\147\1\150\1\151\1\230\1\147\17\117"+
    "\1\204\36\117\1\147\1\150\1\151\1\230\1\147\4\117"+
    "\2\202\1\246\10\202\1\204\2\202\1\117\1\202\3\117"+
    "\5\202\22\117\1\147\1\150\1\151\1\230\1\147\4\117"+
    "\7\202\1\247\3\202\1\204\2\202\1\117\1\202\3\117"+
    "\5\202\21\117\1\0\5\205\4\0\2\207\1\250\10\207"+
    "\1\211\2\207\1\0\1\207\3\0\5\207\22\0\5\205"+
    "\4\0\7\207\1\251\3\207\1\211\2\207\1\0\1\207"+
    "\3\0\5\207\33\0\1\157\71\0\1\252\53\0\1\15"+
    "\1\253\11\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\33\0\5\15\1\254\5\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\21\0\1\146\1\200\1\150\1\151\1\243"+
    "\1\200\17\146\1\227\36\146\1\200\1\150\1\151\1\243"+
    "\1\200\4\146\2\225\1\255\10\225\1\227\2\225\1\146"+
    "\1\225\3\146\5\225\22\146\1\200\1\150\1\151\1\243"+
    "\1\200\4\146\7\225\1\256\3\225\1\227\2\225\1\146"+
    "\1\225\3\146\5\225\21\146\1\117\1\147\1\150\1\151"+
    "\1\230\1\147\4\117\3\202\1\257\7\202\1\204\2\202"+
    "\1\117\1\202\3\117\5\202\22\117\1\147\1\150\1\151"+
    "\1\230\1\147\4\117\10\202\1\260\2\202\1\204\2\202"+
    "\1\117\1\202\3\117\5\202\21\117\1\0\5\205\4\0"+
    "\3\207\1\261\7\207\1\211\2\207\1\0\1\207\3\0"+
    "\5\207\22\0\5\205\4\0\10\207\1\262\2\207\1\211"+
    "\2\207\1\0\1\207\3\0\5\207\36\0\1\263\57\0"+
    "\7\15\1\264\3\15\1\0\2\15\1\0\1\15\3\0"+
    "\5\15\22\0\5\265\1\266\3\0\13\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\21\0\1\146\1\200\1\150"+
    "\1\151\1\243\1\200\4\146\3\225\1\267\7\225\1\227"+
    "\2\225\1\146\1\225\3\146\5\225\22\146\1\200\1\150"+
    "\1\151\1\243\1\200\4\146\10\225\1\270\2\225\1\227"+
    "\2\225\1\146\1\225\3\146\5\225\21\146\1\117\1\147"+
    "\1\150\1\151\1\230\1\147\4\117\4\202\1\271\6\202"+
    "\1\204\2\202\1\117\1\202\3\117\5\202\22\117\1\147"+
    "\1\150\1\151\1\230\1\147\4\117\11\202\1\272\1\202"+
    "\1\204\2\202\1\117\1\202\3\117\5\202\21\117\1\0"+
    "\5\205\4\0\4\207\1\273\6\207\1\211\2\207\1\0"+
    "\1\207\3\0\5\207\22\0\5\205\4\0\11\207\1\274"+
    "\1\207\1\211\2\207\1\0\1\207\3\0\5\207\41\0"+
    "\1\157\43\0\5\265\1\266\54\0\1\146\1\200\1\150"+
    "\1\151\1\243\1\200\4\146\4\225\1\275\6\225\1\227"+
    "\2\225\1\146\1\225\3\146\5\225\22\146\1\200\1\150"+
    "\1\151\1\243\1\200\4\146\11\225\1\276\1\225\1\227"+
    "\2\225\1\146\1\225\3\146\5\225\21\146\1\117\1\147"+
    "\1\150\1\151\1\230\1\147\4\117\5\202\1\277\5\202"+
    "\1\204\2\202\1\117\1\202\3\117\5\202\22\117\1\147"+
    "\1\150\1\151\1\230\1\147\4\117\12\202\1\300\1\204"+
    "\2\202\1\117\1\202\3\117\5\202\21\117\1\0\5\205"+
    "\4\0\5\207\1\301\5\207\1\211\2\207\1\0\1\207"+
    "\3\0\5\207\22\0\5\205\4\0\12\207\1\302\1\211"+
    "\2\207\1\0\1\207\3\0\5\207\21\0\1\146\1\200"+
    "\1\150\1\151\1\243\1\200\4\146\5\225\1\303\5\225"+
    "\1\227\2\225\1\146\1\225\3\146\5\225\22\146\1\200"+
    "\1\150\1\151\1\243\1\200\4\146\12\225\1\304\1\227"+
    "\2\225\1\146\1\225\3\146\5\225\21\146\1\117\1\147"+
    "\1\150\1\151\1\230\1\147\4\117\1\202\1\305\11\202"+
    "\1\204\2\202\1\117\1\202\3\117\5\202\21\117\1\0"+
    "\5\205\4\0\1\207\1\306\11\207\1\211\2\207\1\0"+
    "\1\207\3\0\5\207\21\0\1\146\1\200\1\150\1\151"+
    "\1\243\1\200\4\146\1\225\1\307\11\225\1\227\2\225"+
    "\1\146\1\225\3\146\5\225\21\146\1\117\1\147\1\150"+
    "\1\151\1\230\1\147\4\117\7\202\1\277\3\202\1\204"+
    "\2\202\1\117\1\202\3\117\5\202\21\117\1\0\5\205"+
    "\4\0\7\207\1\301\3\207\1\211\2\207\1\0\1\207"+
    "\3\0\5\207\21\0\1\146\1\200\1\150\1\151\1\243"+
    "\1\200\4\146\7\225\1\303\3\225\1\227\2\225\1\146"+
    "\1\225\3\146\5\225\21\146";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7599];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\3\0\1\11\4\1\1\11\13\1\1\11\2\1"+
    "\16\11\7\1\2\11\4\0\2\11\16\1\1\11\2\1"+
    "\1\0\1\11\1\1\3\11\1\0\2\1\2\0\1\1"+
    "\1\0\16\1\2\0\1\1\1\0\1\1\5\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\11\10\1\1\0\4\1\4\0\1\11\2\0\1\11"+
    "\1\0\6\1\3\0\4\1\4\0\4\1\3\0\2\1"+
    "\3\0\2\1\2\0\2\1\3\0\1\1\1\0\1\11"+
    "\2\0\2\1\4\0\3\1\1\0\1\1\1\0\1\1"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 4: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 57: break;
          case 5: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 58: break;
          case 6: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 59: break;
          case 7: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 60: break;
          case 8: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 66: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 67: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 69: break;
          case 17: 
            { return OpenSCADTypes.EXP;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 71: break;
          case 19: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 72: break;
          case 20: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 73: break;
          case 21: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 76: break;
          case 24: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 77: break;
          case 25: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 79: break;
          case 27: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 80: break;
          case 28: 
            { return OpenSCADTypes.IMPORT_PATH;
            } 
            // fall through
          case 81: break;
          case 29: 
            { return OpenSCADTypes.IMPORT_START;
            } 
            // fall through
          case 82: break;
          case 30: 
            { yybegin(YYINITIAL); return OpenSCADTypes.IMPORT_END;
            } 
            // fall through
          case 83: break;
          case 31: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 84: break;
          case 32: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 85: break;
          case 33: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 86: break;
          case 34: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 87: break;
          case 35: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 36: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 89: break;
          case 37: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 90: break;
          case 38: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 91: break;
          case 39: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 92: break;
          case 40: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 93: break;
          case 41: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 42: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(IMPORT_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 44: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 45: 
            { return OpenSCADTypes.EACH_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 47: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 100: break;
          case 48: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 49: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 50: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 51: 
            { return OpenSCADTypes.ASSIGN_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 52: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(IMPORT_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
