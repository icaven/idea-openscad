// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: openscad.flex

package com.javampire.openscad.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


class OpenSCADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT_PATH_STATE = 2;
  public static final int BUILTIN_OVERRIDABLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\0\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\25"+
    "\1\26\7\25\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\4\35\1\36\25\35\1\37\1\40\1\41\1\42"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\7\0"+
    "\1\3\u01a2\0\2\3\326\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\17\6\1\32\1\1\1\33\1\17"+
    "\1\34\1\2\1\35\1\36\1\37\1\40\1\41\1\4"+
    "\1\0\1\42\1\20\1\0\1\43\1\6\1\44\1\45"+
    "\1\46\20\6\1\47\36\6\1\50\1\43\5\0\2\43"+
    "\1\0\1\20\22\6\1\51\6\6\1\52\1\6\1\0"+
    "\1\53\35\6\1\43\1\0\2\43\1\0\1\43\1\20"+
    "\3\0\1\54\1\0\1\43\1\0\1\55\7\6\1\0"+
    "\1\56\2\6\1\0\1\57\1\6\1\60\1\6\1\61"+
    "\1\0\1\62\14\6\1\0\1\63\1\6\1\0\1\64"+
    "\1\6\1\0\1\65\1\0\1\66\4\6\1\0\1\67"+
    "\2\6\1\0\1\70\10\6\1\0\1\71\1\6\1\0"+
    "\1\72\1\6\1\0\1\73\1\6\1\74\1\6\1\0"+
    "\1\75\1\6\1\0\2\43\1\54\1\76\1\0\1\77"+
    "\1\0\1\100\1\0\1\101\2\6\1\0\1\102\1\6"+
    "\1\0\1\103\4\6\1\0\1\104\1\105\20\6\1\0"+
    "\1\106\12\6\1\0\1\107\1\0\1\110\1\6\1\0"+
    "\1\111\1\112\1\6\1\113\1\77\1\0\1\6\1\114"+
    "\1\0\1\115\1\0\1\116\1\6\1\0\1\117\1\6"+
    "\1\0\1\120\1\0\1\121\15\6\1\122\5\6\1\0"+
    "\1\123\3\6\1\0\1\124\3\6\1\125\1\0\1\126"+
    "\1\6\1\0\1\127\1\6\1\0\1\130\6\6\1\0"+
    "\1\131\3\6\1\0\1\132\6\6\1\0\1\133\1\0"+
    "\1\134\1\0\1\135\1\6\1\0\1\136\3\6\1\137"+
    "\2\6\1\0\1\140\1\6\1\0\1\141\1\6\1\0"+
    "\1\142\6\6\1\0\1\143\3\6\1\0\1\144\1\0"+
    "\1\145\1\6\1\0\1\146\5\6\1\0\1\147\14\6"+
    "\1\0\1\150\1\6\1\0\1\151\6\6\1\0\1\152"+
    "\1\0\1\153\3\6\1\0\1\154\1\6\1\0\1\155"+
    "\1\0\1\156\3\6\1\0\1\157\3\6\1\0\1\160"+
    "\6\6\1\0\1\161\2\6\1\0\1\162\1\0\1\163"+
    "\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0104\0\u0208\0\u0104\0\u0249\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u028a\0\u02cb\0\u030c\0\u0104\0\u0104\0\u034d"+
    "\0\u038e\0\u03cf\0\u0104\0\u0104\0\u0104\0\u0104\0\u0410\0\u0451"+
    "\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u0104\0\u07df\0\u0104"+
    "\0\u0820\0\u0861\0\u08a2\0\u0104\0\u0104\0\u08e3\0\u0104\0\u0104"+
    "\0\u0104\0\u0924\0\u0104\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0104"+
    "\0\u0104\0\u0104\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0208\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u0104\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u0208\0\u1d33"+
    "\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u0208\0\u1eb9\0\u1efa"+
    "\0\u0104\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u279c\0\u27dd\0\u181f\0\u281e\0\u285f\0\u28a0"+
    "\0\u285f\0\u28e1\0\u2922\0\u2963\0\u0104\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u0104\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u0104\0\u2c6f\0\u0208\0\u2cb0\0\u0208\0\u2cf1\0\u0104"+
    "\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9"+
    "\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u0104\0\u307f\0\u30c0"+
    "\0\u0104\0\u3101\0\u3142\0\u0104\0\u3183\0\u0104\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u0104\0\u3309\0\u334a\0\u338b\0\u0104"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\u0104\0\u3615\0\u3656\0\u0104\0\u3697\0\u36d8\0\u0104"+
    "\0\u3719\0\u0208\0\u375a\0\u379b\0\u0104\0\u37dc\0\u381d\0\u385e"+
    "\0\u389f\0\u0104\0\u0104\0\u38e0\0\u179d\0\u3921\0\u0104\0\u3962"+
    "\0\u0104\0\u39a3\0\u39e4\0\u3a25\0\u0104\0\u3a66\0\u3aa7\0\u0104"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u0104\0\u0208\0\u3c2d"+
    "\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d"+
    "\0\u0104\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\u4308\0\u0104\0\u4349\0\u0104\0\u438a"+
    "\0\u43cb\0\u0104\0\u0208\0\u440c\0\u444d\0\u2698\0\u448e\0\u44cf"+
    "\0\u0208\0\u4510\0\u0104\0\u4551\0\u0104\0\u4592\0\u45d3\0\u0104"+
    "\0\u4614\0\u4655\0\u0104\0\u4696\0\u0104\0\u46d7\0\u4718\0\u4759"+
    "\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961"+
    "\0\u49a2\0\u49e3\0\u0208\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28"+
    "\0\u4b69\0\u0104\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u0104\0\u4cae"+
    "\0\u4cef\0\u4d30\0\u0104\0\u4d71\0\u0104\0\u4db2\0\u4df3\0\u0104"+
    "\0\u4e34\0\u4e75\0\u0104\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba"+
    "\0\u4ffb\0\u503c\0\u0104\0\u507d\0\u50be\0\u50ff\0\u5140\0\u0104"+
    "\0\u5181\0\u51c2\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307\0\u0104"+
    "\0\u5348\0\u0104\0\u5389\0\u0104\0\u53ca\0\u540b\0\u0104\0\u544c"+
    "\0\u548d\0\u54ce\0\u0208\0\u550f\0\u5550\0\u5591\0\u0104\0\u55d2"+
    "\0\u5613\0\u0104\0\u5654\0\u5695\0\u0104\0\u56d6\0\u5717\0\u5758"+
    "\0\u5799\0\u57da\0\u581b\0\u585c\0\u0104\0\u589d\0\u58de\0\u591f"+
    "\0\u5960\0\u0104\0\u59a1\0\u0104\0\u59e2\0\u5a23\0\u0104\0\u5a64"+
    "\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u0104\0\u5bea\0\u5c2b"+
    "\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33"+
    "\0\u5e74\0\u5eb5\0\u5ef6\0\u0104\0\u5f37\0\u5f78\0\u0104\0\u5fb9"+
    "\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u0104\0\u6180"+
    "\0\u0104\0\u61c1\0\u6202\0\u6243\0\u6284\0\u0104\0\u62c5\0\u6306"+
    "\0\u0104\0\u6347\0\u0104\0\u6388\0\u63c9\0\u640a\0\u644b\0\u0104"+
    "\0\u648c\0\u64cd\0\u650e\0\u654f\0\u0104\0\u6590\0\u65d1\0\u6612"+
    "\0\u6653\0\u6694\0\u66d5\0\u6716\0\u0104\0\u6757\0\u6798\0\u67d9"+
    "\0\u0104\0\u681a\0\u0104\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\6\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\1\33\2\12"+
    "\1\34\1\5\1\35\1\36\1\12\1\37\1\12\1\40"+
    "\1\12\1\41\1\42\2\12\1\43\2\12\1\44\1\45"+
    "\1\46\1\47\1\50\1\12\1\51\1\52\1\53\1\54"+
    "\1\55\4\12\1\56\1\57\1\60\1\5\6\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\61\2\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\12\1\34\1\5\1\35"+
    "\1\36\1\12\1\37\1\12\1\40\1\12\1\41\1\42"+
    "\2\12\1\43\2\12\1\44\1\45\1\46\1\47\1\50"+
    "\1\12\1\51\1\52\1\53\1\54\1\55\4\12\1\56"+
    "\1\57\1\60\1\62\6\63\22\62\1\64\1\62\1\65"+
    "\45\62\1\5\6\6\3\5\1\66\2\5\1\67\7\5"+
    "\2\66\6\5\2\66\4\5\33\66\3\5\102\0\6\6"+
    "\124\0\1\70\46\0\10\10\1\71\27\10\1\72\40\10"+
    "\12\0\1\12\12\0\2\12\6\0\2\12\4\0\33\12"+
    "\17\0\1\73\111\0\2\74\71\0\1\75\4\0\1\76"+
    "\66\0\1\12\10\0\1\74\1\0\2\25\6\0\1\12"+
    "\1\77\4\0\5\12\1\77\25\12\35\0\1\100\100\0"+
    "\1\101\100\0\1\102\60\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\2\12\1\103\1\104\17\12\1\105\1\106"+
    "\6\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\5\12\1\107\2\12\1\110\6\12\1\111\2\12\1\112"+
    "\10\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\1\12\1\113\1\12\1\114\10\12\1\115\13\12\1\116"+
    "\2\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\1\12\1\117\12\12\1\120\2\12\1\121\5\12\1\122"+
    "\5\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\6\12\1\123\6\12\1\124\1\125\4\12\1\126\7\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\5\12"+
    "\1\127\3\12\1\130\4\12\1\131\1\132\13\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\1\12\1\133"+
    "\7\12\1\134\5\12\1\135\5\12\1\136\5\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\137"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\22\12\1\140\10\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\1\12\1\141\15\12\1\142\2\12\1\143"+
    "\10\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\1\12\1\144\3\12\1\145\11\12\1\146\13\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\5\12\1\147"+
    "\3\12\1\150\7\12\1\151\2\12\1\152\1\153\5\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\1\12"+
    "\1\154\3\12\1\155\14\12\1\156\10\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\16\12\1\157\4\12"+
    "\1\160\7\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\5\12\1\161\25\12\102\0\1\162\20\0\1\75"+
    "\4\0\1\163\54\0\31\62\1\0\1\62\1\0\46\62"+
    "\6\63\22\62\1\0\1\62\1\0\45\62\12\0\1\66"+
    "\12\0\2\66\6\0\2\66\4\0\33\66\3\0\101\10"+
    "\25\0\2\74\7\0\1\164\11\0\1\164\30\0\1\165"+
    "\1\166\2\165\1\166\1\165\1\166\10\165\1\167\17\165"+
    "\1\170\41\165\1\171\1\76\1\0\1\171\1\76\1\0"+
    "\1\76\30\171\1\172\41\171\12\0\1\12\5\0\1\173"+
    "\1\0\1\173\2\0\2\174\6\0\2\12\4\0\33\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\23\12"+
    "\1\175\7\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\17\12\1\176\13\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\11\12\1\177\11\12\1\200\7\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\1\12"+
    "\1\201\31\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\11\12\1\202\21\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\11\12\1\203\10\12\1\204\10\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\14\12"+
    "\1\205\1\12\1\206\4\12\1\207\7\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\17\12\1\210\13\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\3\12"+
    "\1\211\27\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\10\12\1\212\22\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\23\12\1\213\7\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\20\12\1\214\12\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\14\12"+
    "\1\215\16\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\17\12\1\216\13\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\22\12\1\217\10\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\16\12\1\220\14\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\20\12"+
    "\1\221\12\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\3\12\1\222\20\12\1\223\6\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\1\224\32\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\16\12\1\225"+
    "\5\12\1\226\6\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\227\14\12\4\0\6\230\3\0"+
    "\1\12\2\0\1\231\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\7\12\1\232\7\12\1\233\13\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\30\12\1\234\2\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\16\12\1\235"+
    "\14\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\4\12\1\236\26\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\14\12\1\237\16\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\22\12\1\240\10\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\4\12\1\241"+
    "\26\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\22\12\1\242\10\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\14\12\1\243\12\12\1\244\3\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\245"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\16\12\1\246\14\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\247\4\12\1\250\7\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\24\12\1\251"+
    "\1\252\5\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\1\12\1\253\31\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\7\12\1\254\6\12\1\255\14\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\22\12"+
    "\1\256\10\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\22\12\1\257\10\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\22\12\1\260\10\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\16\12\1\261\14\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\30\12"+
    "\1\262\2\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\25\12\1\263\5\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\4\12\1\264\26\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\5\12\1\265\25\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\22\12"+
    "\1\266\10\12\3\0\1\267\1\163\1\270\1\271\1\272"+
    "\1\273\1\163\30\267\1\274\41\267\20\0\1\173\1\0"+
    "\1\173\2\0\2\275\52\0\17\165\1\276\62\165\1\166"+
    "\2\165\1\166\1\165\1\166\10\165\1\276\17\165\1\170"+
    "\41\165\17\277\1\300\4\277\1\301\54\277\6\165\1\302"+
    "\10\165\1\276\1\165\2\302\2\165\3\302\5\165\2\302"+
    "\5\165\32\302\3\165\2\171\1\0\2\171\1\0\75\171"+
    "\1\0\2\171\1\0\1\303\12\171\2\303\2\171\3\303"+
    "\5\171\2\303\5\171\32\303\3\171\25\0\2\275\64\0"+
    "\1\12\12\0\2\174\6\0\2\12\4\0\33\12\4\0"+
    "\6\304\3\0\1\12\2\0\1\305\7\0\2\12\6\0"+
    "\2\12\4\0\33\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\23\12\1\306\7\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\16\12\1\307\14\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\5\12\1\310"+
    "\3\12\1\311\21\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\312\14\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\14\12\1\313\16\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\14\12\1\314"+
    "\16\12\4\0\6\315\3\0\1\12\2\0\1\316\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\17\12\1\317\13\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\3\12\1\320"+
    "\27\12\4\0\6\321\3\0\1\12\2\0\1\322\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\23\12\1\323\7\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\10\12\1\324"+
    "\22\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\17\12\1\325\13\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\5\12\1\326\25\12\4\0\6\327\3\0"+
    "\1\12\2\0\1\330\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\23\12\1\331\7\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\17\12\1\332\13\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\3\12\1\333\27\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\334"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\14\12\1\335\16\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\5\12\1\336\25\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\2\12\1\337\3\12\1\340"+
    "\5\12\1\341\1\12\1\342\4\12\1\343\1\12\1\344"+
    "\5\12\4\0\6\345\3\0\1\12\2\0\1\346\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\5\12\1\347\25\12\4\0"+
    "\6\230\6\0\1\231\64\0\6\350\3\0\1\12\2\0"+
    "\1\351\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\13\12\1\352"+
    "\17\12\4\0\6\353\3\0\1\12\2\0\1\354\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\4\0\6\355\3\0"+
    "\1\12\2\0\1\356\7\0\2\12\6\0\2\12\4\0"+
    "\13\12\1\357\17\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\25\12\1\360\5\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\24\12\1\361\6\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\15\12\1\362"+
    "\15\12\4\0\6\363\3\0\1\12\2\0\1\364\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\5\12\1\365\25\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\31\12\1\366"+
    "\1\12\4\0\6\367\3\0\1\12\2\0\1\370\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\12\12\1\371\20\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\4\12\1\372"+
    "\26\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\4\12\1\373\26\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\11\12\1\374\21\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\1\12\1\375\31\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\16\12\1\376"+
    "\14\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\22\12\1\377\10\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\u0100\14\12\4\0\6\u0101\3\0"+
    "\1\12\2\0\1\u0102\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u0103\6\12\4\0\6\u0104\3\0\1\12\2\0"+
    "\1\u0105\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\6\12\1\u0106"+
    "\24\12\4\0\6\u0107\3\0\1\12\2\0\1\u0108\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\24\12\1\u0109\6\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\5\12\1\u010a"+
    "\25\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\5\12\1\u010b\25\12\4\0\6\u010c\3\0\1\12\12\0"+
    "\2\12\2\0\1\u010d\3\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\23\12\1\u010e"+
    "\7\12\3\0\2\267\1\270\2\271\1\273\73\267\24\0"+
    "\1\u010f\54\0\2\267\1\270\2\271\1\273\16\267\1\u0110"+
    "\55\267\1\163\1\270\1\271\1\272\1\273\1\163\15\267"+
    "\1\u0110\12\267\1\274\41\267\2\0\1\270\21\0\1\u010f"+
    "\54\0\2\267\1\270\2\271\1\273\1\u0111\12\267\2\u0111"+
    "\2\267\3\u0111\5\267\2\u0111\5\267\32\u0111\3\267\17\165"+
    "\1\276\4\165\1\u0112\54\165\17\277\1\300\100\277\1\300"+
    "\4\277\1\u0113\54\277\6\165\1\302\10\165\1\276\1\165"+
    "\2\302\2\165\3\302\5\165\2\302\2\165\1\u0114\2\165"+
    "\32\302\3\165\2\171\1\0\2\171\1\0\1\303\12\171"+
    "\2\303\2\171\3\303\5\171\2\303\2\171\1\u0115\2\171"+
    "\32\303\3\171\1\0\6\304\6\0\1\305\64\0\6\u0116"+
    "\3\0\1\12\2\0\1\u0117\7\0\2\12\6\0\2\12"+
    "\4\0\33\12\4\0\6\u0118\3\0\1\12\2\0\1\u0119"+
    "\7\0\2\12\6\0\2\12\4\0\33\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\22\12\1\u011a\10\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\7\12"+
    "\1\u011b\23\12\4\0\6\u011c\3\0\1\12\2\0\1\u011d"+
    "\7\0\1\12\1\u011e\6\0\2\12\4\0\33\12\4\0"+
    "\6\u011f\3\0\1\12\2\0\1\u0120\7\0\2\12\6\0"+
    "\2\12\4\0\33\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\4\12\1\u0121\26\12\4\0\6\315\6\0"+
    "\1\316\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\22\12\1\u0122\10\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\1\12\1\u0123\31\12\4\0\6\321\6\0"+
    "\1\322\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\23\12\1\u0124\7\12\4\0\6\u0125\3\0\1\12\2\0"+
    "\1\u0126\7\0\2\12\6\0\2\12\4\0\33\12\4\0"+
    "\6\327\6\0\1\330\75\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\5\12\1\u0127\25\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\22\12\1\u0128\10\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\24\12\1\u0129"+
    "\6\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\22\12\1\u012a\10\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\25\12\1\u012b\5\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\22\12\1\u012c\10\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u012d"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\25\12\1\u012e\5\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\11\12\1\u012f\21\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\25\12\1\u0130\5\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\24\12\1\u0131"+
    "\6\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\16\12\1\u0132\14\12\4\0\6\345\6\0\1\346\75\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\1\12\1\u0133"+
    "\31\12\4\0\6\350\6\0\1\351\75\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\25\12\1\u0134\5\12\4\0"+
    "\6\353\6\0\1\354\64\0\6\355\6\0\1\356\75\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u0135"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\14\12\1\u0136\16\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\15\12\1\u0137\15\12\4\0\6\u0138\3\0"+
    "\1\12\2\0\1\u0139\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\4\0\6\363\6\0\1\364\75\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\16\12\1\u013a\14\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\7\12\1\u013b"+
    "\1\u013c\22\12\4\0\6\367\6\0\1\370\75\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\5\12\1\u013d\25\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\23\12"+
    "\1\u013e\7\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\5\12\1\u013f\25\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\32\12\1\u0140\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\24\12\1\u0141\6\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\4\12\1\u0142"+
    "\26\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\3\12\1\u0143\27\12\4\0\6\u0144\3\0\1\12\2\0"+
    "\1\u0145\7\0\2\12\6\0\2\12\4\0\33\12\4\0"+
    "\6\u0101\6\0\1\u0102\64\0\6\u0146\3\0\1\12\2\0"+
    "\1\u0147\7\0\2\12\6\0\2\12\4\0\33\12\4\0"+
    "\6\u0104\6\0\1\u0105\75\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\1\12\1\u0148\31\12\4\0\6\u0107\6\0"+
    "\1\u0108\64\0\6\u0149\3\0\1\12\2\0\1\u014a\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\6\12\1\u014b\24\12\4\0"+
    "\6\u010c\22\0\1\u010d\61\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\11\12\1\u014c\21\12\27\0\1\u014d\54\0"+
    "\2\267\1\270\2\271\1\273\16\267\1\u014d\56\267\1\270"+
    "\2\271\1\273\1\u0111\12\267\2\u0111\2\267\3\u0111\5\267"+
    "\2\u0111\2\267\1\u014e\2\267\32\u0111\3\267\1\165\1\u0114"+
    "\2\165\1\u0114\1\165\1\u0114\10\165\1\u014f\61\165\1\0"+
    "\6\u0116\6\0\1\u0117\64\0\6\u0118\6\0\1\u0119\75\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\24\12\1\u0150"+
    "\6\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\16\12\1\u0151\14\12\4\0\6\u011c\6\0\1\u011d\64\0"+
    "\6\u0152\3\0\1\12\2\0\1\u0153\7\0\2\12\6\0"+
    "\2\12\4\0\33\12\4\0\6\u011f\6\0\1\u0120\64\0"+
    "\6\u0154\3\0\1\12\2\0\1\u0155\7\0\2\12\6\0"+
    "\2\12\4\0\22\12\1\u0156\10\12\4\0\6\u0157\3\0"+
    "\1\12\2\0\1\u0158\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u0159\6\12\4\0\6\u015a\3\0\1\12\2\0"+
    "\1\u015b\7\0\2\12\6\0\2\12\4\0\33\12\4\0"+
    "\6\u0125\6\0\1\u0126\64\0\6\u015c\3\0\1\12\2\0"+
    "\1\u015d\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\11\12\1\u015e"+
    "\21\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u015f\6\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\4\12\1\u0160\26\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\23\12\1\u0161\7\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u0162"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\16\12\1\u0163\14\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\23\12\1\u0164\7\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\15\12\1\u0165\15\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\22\12\1\u0166"+
    "\10\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\4\12\1\u0167\26\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\22\12\1\u0168\10\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\20\12\1\u0169\12\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\27\12\1\u016a"+
    "\3\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\5\12\1\u016b\25\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\1\12\1\u016c\31\12\4\0\6\u0138\6\0"+
    "\1\u0139\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u016d\6\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\17\12\1\u016e\13\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\5\12\1\u016f\25\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\3\12\1\u0170"+
    "\27\12\4\0\6\u0171\3\0\1\12\2\0\1\u0172\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\22\12\1\u0173\10\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\5\12\1\u0174"+
    "\25\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\5\12\1\u0175\25\12\4\0\6\u0176\3\0\1\12\2\0"+
    "\1\u0177\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\10\12\1\u0178"+
    "\22\12\4\0\6\u0144\6\0\1\u0145\64\0\6\u0146\6\0"+
    "\1\u0147\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\3\12\1\u0179\27\12\4\0\6\u0149\6\0\1\u014a\75\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u017a"+
    "\13\12\3\0\2\u014d\1\270\2\u014d\1\273\73\u014d\17\165"+
    "\1\276\4\165\1\u017b\54\165\1\0\6\u017c\3\0\1\12"+
    "\2\0\1\u017d\7\0\2\12\6\0\2\12\4\0\33\12"+
    "\4\0\6\u0152\6\0\1\u0153\64\0\6\u0154\6\0\1\u0155"+
    "\75\0\1\12\12\0\2\12\6\0\2\12\4\0\5\12"+
    "\1\u017e\25\12\4\0\6\u0157\6\0\1\u0158\64\0\6\u017f"+
    "\3\0\1\12\2\0\1\u0180\7\0\2\12\6\0\2\12"+
    "\4\0\33\12\4\0\6\u015a\6\0\1\u015b\64\0\6\u015c"+
    "\6\0\1\u015d\75\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\17\12\1\u0181\13\12\4\0\6\u0182\3\0\1\12"+
    "\2\0\1\u0183\7\0\2\12\6\0\2\12\4\0\1\u0184"+
    "\32\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\5\12\1\u0185\25\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\5\12\1\u0186\25\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\14\12\1\u0187\16\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\3\12\1\u0188"+
    "\27\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u0189\6\12\4\0\6\u018a\3\0\1\12\2\0"+
    "\1\u018b\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\11\12\1\u018c"+
    "\21\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\5\12\1\u018d\25\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\1\u018e\32\12\4\0\6\u018f\3\0\1\12"+
    "\2\0\1\u0190\7\0\2\12\6\0\2\12\4\0\33\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\23\12"+
    "\1\u0191\7\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\24\12\1\u0192\6\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\1\u0193\32\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\16\12\1\u0194\14\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\4\12\1\u0195"+
    "\26\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u0196\6\12\4\0\6\u0171\6\0\1\u0172\64\0"+
    "\6\u0197\3\0\1\12\2\0\1\u0198\7\0\2\12\6\0"+
    "\2\12\4\0\33\12\4\0\6\u0199\3\0\1\12\2\0"+
    "\1\u019a\7\0\2\12\6\0\2\12\4\0\33\12\4\0"+
    "\6\u019b\3\0\1\12\2\0\1\u019c\7\0\2\12\6\0"+
    "\2\12\4\0\1\u019d\32\12\4\0\6\u0176\6\0\1\u0177"+
    "\64\0\6\u019e\3\0\1\12\2\0\1\u019f\7\0\2\12"+
    "\6\0\2\12\4\0\33\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\5\12\1\u01a0\25\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\16\12\1\u01a1\14\12"+
    "\4\0\6\u017c\6\0\1\u017d\75\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\16\12\1\u01a2\14\12\4\0\6\u017f"+
    "\6\0\1\u0180\75\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\16\12\1\u01a3\14\12\4\0\6\u0182\6\0\1\u0183"+
    "\75\0\1\12\12\0\2\12\6\0\2\12\4\0\4\12"+
    "\1\u01a4\16\12\1\u01a5\7\12\4\0\6\u01a6\3\0\1\12"+
    "\12\0\2\12\2\0\1\u01a7\3\0\2\12\4\0\33\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\3\12"+
    "\1\u01a8\27\12\4\0\6\u01a9\3\0\1\12\2\0\1\u01aa"+
    "\7\0\2\12\6\0\2\12\4\0\33\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\24\12\1\u01ab\6\12"+
    "\4\0\6\u01ac\3\0\1\12\2\0\1\u01ad\7\0\2\12"+
    "\6\0\2\12\4\0\33\12\4\0\6\u018a\6\0\1\u018b"+
    "\75\0\1\12\12\0\2\12\6\0\2\12\4\0\16\12"+
    "\1\u01ae\14\12\15\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\6\12\1\u01af\24\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\5\12\1\u01b0\25\12\4\0\6\u018f"+
    "\6\0\1\u0190\75\0\1\12\12\0\2\12\6\0\2\12"+
    "\4\0\13\12\1\u01b1\17\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\22\12\1\u01b2\10\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\15\12\1\u01b3\15\12"+
    "\4\0\6\u01b4\3\0\1\12\2\0\1\u01b5\7\0\2\12"+
    "\6\0\2\12\4\0\33\12\15\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\22\12\1\u01b6\10\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\11\12\1\u01b7\21\12"+
    "\4\0\6\u0197\6\0\1\u0198\64\0\6\u0199\6\0\1\u019a"+
    "\64\0\6\u019b\6\0\1\u019c\75\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\5\12\1\u01b8\25\12\4\0\6\u019e"+
    "\6\0\1\u019f\64\0\6\u01b9\3\0\1\12\2\0\1\u01ba"+
    "\7\0\2\12\6\0\2\12\4\0\33\12\4\0\6\u01bb"+
    "\3\0\1\12\2\0\1\u01bc\7\0\2\12\6\0\2\12"+
    "\4\0\1\u01bd\32\12\4\0\6\u01be\3\0\1\12\2\0"+
    "\1\u01bf\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\30\12\1\u01c0"+
    "\2\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u01c1\6\12\4\0\6\u01a6\22\0\1\u01a7\61\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\24\12\1\u01c2"+
    "\6\12\4\0\6\u01a9\6\0\1\u01aa\75\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\11\12\1\u01c3\21\12\4\0"+
    "\6\u01ac\6\0\1\u01ad\75\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\7\12\1\u01c4\23\12\4\0\6\u01c5\3\0"+
    "\1\12\2\0\1\u01c6\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\30\12\1\u01c7\2\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\11\12\1\u01c8\21\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\11\12\1\u01c9\21\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u01ca"+
    "\13\12\4\0\6\u01b4\6\0\1\u01b5\75\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\17\12\1\u01cb\13\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u01cc"+
    "\13\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\30\12\1\u01cd\2\12\4\0\6\u01b9\6\0\1\u01ba\64\0"+
    "\6\u01bb\6\0\1\u01bc\75\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\u01ce\14\12\4\0\6\u01be\6\0"+
    "\1\u01bf\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\6\12\1\u01cf\24\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\14\12\1\u01d0\16\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\11\12\1\u01d1\21\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\17\12\1\u01d2"+
    "\13\12\4\0\6\u01d3\3\0\1\12\2\0\1\u01d4\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\4\0\6\u01c5\6\0"+
    "\1\u01c6\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\24\12\1\u01d5\6\12\4\0\6\u01d6\3\0\1\12\2\0"+
    "\1\u01d7\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\30\12\1\u01d8"+
    "\2\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\4\12\1\u01d9\26\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\u01da\14\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\16\12\1\u01db\14\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\24\12\1\u01dc"+
    "\6\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\25\12\1\u01dd\5\12\4\0\6\u01de\3\0\1\12\2\0"+
    "\1\u01df\7\0\2\12\6\0\2\12\4\0\33\12\4\0"+
    "\6\u01e0\3\0\1\12\2\0\1\u01e1\7\0\2\12\6\0"+
    "\2\12\4\0\33\12\15\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\17\12\1\u01e2\13\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\16\12\1\u01e3\14\12\4\0"+
    "\6\u01d3\6\0\1\u01d4\75\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\22\12\1\u01e4\10\12\4\0\6\u01d6\6\0"+
    "\1\u01d7\64\0\6\u01e5\3\0\1\12\2\0\1\u01e6\7\0"+
    "\2\12\6\0\2\12\4\0\33\12\15\0\1\12\12\0"+
    "\2\12\6\0\2\12\4\0\25\12\1\u01e7\5\12\4\0"+
    "\6\u01e8\3\0\1\12\2\0\1\u01e9\7\0\2\12\6\0"+
    "\2\12\4\0\33\12\4\0\6\u01ea\3\0\1\12\2\0"+
    "\1\u01eb\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\22\12\1\u01ec"+
    "\10\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\15\12\1\u01ed\15\12\4\0\6\u01de\6\0\1\u01df\64\0"+
    "\6\u01e0\6\0\1\u01e1\75\0\1\12\12\0\2\12\6\0"+
    "\2\12\4\0\16\12\1\u01ee\14\12\4\0\6\u01ef\3\0"+
    "\1\12\2\0\1\u01f0\7\0\2\12\6\0\2\12\4\0"+
    "\33\12\15\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\25\12\1\u01f1\5\12\4\0\6\u01e5\6\0\1\u01e6\75\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\14\12\1\u01f2"+
    "\16\12\4\0\6\u01e8\6\0\1\u01e9\64\0\6\u01ea\6\0"+
    "\1\u01eb\75\0\1\12\12\0\2\12\6\0\2\12\4\0"+
    "\25\12\1\u01f3\5\12\4\0\6\u01f4\3\0\1\12\2\0"+
    "\1\u01f5\7\0\2\12\6\0\2\12\4\0\33\12\15\0"+
    "\1\12\12\0\2\12\6\0\2\12\4\0\1\u01f6\32\12"+
    "\4\0\6\u01ef\6\0\1\u01f0\75\0\1\12\12\0\2\12"+
    "\6\0\2\12\4\0\4\12\1\u01f7\26\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\5\12\1\u01f8\25\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\4\12"+
    "\1\u01f9\26\12\4\0\6\u01f4\6\0\1\u01f5\75\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\6\12\1\u01fa\24\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\5\12"+
    "\1\u01fb\25\12\4\0\6\u01fc\3\0\1\12\2\0\1\u01fd"+
    "\7\0\2\12\6\0\2\12\4\0\33\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\5\12\1\u01fe\25\12"+
    "\15\0\1\12\12\0\2\12\6\0\2\12\4\0\17\12"+
    "\1\u01ff\13\12\4\0\6\u0200\3\0\1\12\2\0\1\u0201"+
    "\7\0\2\12\6\0\2\12\4\0\33\12\4\0\6\u01fc"+
    "\6\0\1\u01fd\64\0\6\u0202\3\0\1\12\2\0\1\u0203"+
    "\7\0\2\12\6\0\2\12\4\0\33\12\15\0\1\12"+
    "\12\0\2\12\6\0\2\12\4\0\22\12\1\u0204\10\12"+
    "\4\0\6\u0200\6\0\1\u0201\64\0\6\u0202\6\0\1\u0203"+
    "\63\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[26715];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\1\1\1\11\1\1\6\11"+
    "\3\1\2\11\3\1\4\11\17\1\1\11\1\1\1\11"+
    "\3\1\2\11\1\1\3\11\1\0\1\11\1\1\1\0"+
    "\2\1\3\11\57\1\1\11\1\1\5\0\2\1\1\0"+
    "\34\1\1\0\1\11\36\1\1\0\2\1\1\0\2\1"+
    "\3\0\1\1\1\0\1\1\1\0\1\11\7\1\1\0"+
    "\1\11\2\1\1\0\1\11\4\1\1\0\1\11\14\1"+
    "\1\0\1\11\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\1\0\1\11\4\1\1\0\1\11\2\1\1\0\1\11"+
    "\10\1\1\0\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\1\11\3\1\1\0\1\11\1\1\1\0\2\1\2\11"+
    "\1\0\1\1\1\0\1\11\1\0\1\11\2\1\1\0"+
    "\1\11\1\1\1\0\1\11\4\1\1\0\1\11\21\1"+
    "\1\0\1\11\12\1\1\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\11\4\1\1\0\2\1\1\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\1\1\1\0\1\11\1\0"+
    "\1\11\23\1\1\0\1\11\3\1\1\0\1\11\3\1"+
    "\1\11\1\0\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\1\11\6\1\1\0\1\11\3\1\1\0\1\11\6\1"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\1\1\0"+
    "\1\11\6\1\1\0\1\11\1\1\1\0\1\11\1\1"+
    "\1\0\1\11\6\1\1\0\1\11\3\1\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\5\1\1\0\1\11"+
    "\14\1\1\0\1\11\1\1\1\0\1\11\6\1\1\0"+
    "\1\11\1\0\1\11\3\1\1\0\1\11\1\1\1\0"+
    "\1\11\1\0\1\11\3\1\1\0\1\11\3\1\1\0"+
    "\1\11\6\1\1\0\1\11\2\1\1\0\1\11\1\0"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 117: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 118: break;
          case 3:
            { return OpenSCADTypes.EXCL;
            }
          // fall through
          case 119: break;
          case 4:
            { return OpenSCADTypes.STRING_LITERAL;
            }
          // fall through
          case 120: break;
          case 5:
            { return OpenSCADTypes.HASH;
            }
          // fall through
          case 121: break;
          case 6:
            { return OpenSCADTypes.IDENTIFIER;
            }
          // fall through
          case 122: break;
          case 7:
            { return OpenSCADTypes.PERC;
            }
          // fall through
          case 123: break;
          case 8:
            { return OpenSCADTypes.LPARENTH;
            }
          // fall through
          case 124: break;
          case 9:
            { return OpenSCADTypes.RPARENTH;
            }
          // fall through
          case 125: break;
          case 10:
            { return OpenSCADTypes.MUL;
            }
          // fall through
          case 126: break;
          case 11:
            { return OpenSCADTypes.PLUS;
            }
          // fall through
          case 127: break;
          case 12:
            { return OpenSCADTypes.COMMA;
            }
          // fall through
          case 128: break;
          case 13:
            { return OpenSCADTypes.MINUS;
            }
          // fall through
          case 129: break;
          case 14:
            { return OpenSCADTypes.DOT;
            }
          // fall through
          case 130: break;
          case 15:
            { return OpenSCADTypes.DIV;
            }
          // fall through
          case 131: break;
          case 16:
            { return OpenSCADTypes.NUMBER_LITERAL;
            }
          // fall through
          case 132: break;
          case 17:
            { return OpenSCADTypes.COLON;
            }
          // fall through
          case 133: break;
          case 18:
            { return OpenSCADTypes.SEMICOLON;
            }
          // fall through
          case 134: break;
          case 19:
            { return OpenSCADTypes.LT;
            }
          // fall through
          case 135: break;
          case 20:
            { return OpenSCADTypes.EQUALS;
            }
          // fall through
          case 136: break;
          case 21:
            { return OpenSCADTypes.GT;
            }
          // fall through
          case 137: break;
          case 22:
            { return OpenSCADTypes.QUERY;
            }
          // fall through
          case 138: break;
          case 23:
            { return OpenSCADTypes.LBRACKET;
            }
          // fall through
          case 139: break;
          case 24:
            { return OpenSCADTypes.RBRACKET;
            }
          // fall through
          case 140: break;
          case 25:
            { return OpenSCADTypes.EXP;
            }
          // fall through
          case 141: break;
          case 26:
            { return OpenSCADTypes.LBRACE;
            }
          // fall through
          case 142: break;
          case 27:
            { return OpenSCADTypes.RBRACE;
            }
          // fall through
          case 143: break;
          case 28:
            { return OpenSCADTypes.IMPORT_PATH;
            }
          // fall through
          case 144: break;
          case 29:
            { return OpenSCADTypes.IMPORT_START;
            }
          // fall through
          case 145: break;
          case 30:
            { yybegin(YYINITIAL); return OpenSCADTypes.IMPORT_END;
            }
          // fall through
          case 146: break;
          case 31:
            { yybegin(YYINITIAL); return OpenSCADTypes.IDENTIFIER;
            }
          // fall through
          case 147: break;
          case 32:
            { yybegin(YYINITIAL); return OpenSCADTypes.LPARENTH;
            }
          // fall through
          case 148: break;
          case 33:
            { return OpenSCADTypes.NE;
            }
          // fall through
          case 149: break;
          case 34:
            { return OpenSCADTypes.AND;
            }
          // fall through
          case 150: break;
          case 35:
            { return OpenSCADTypes.COMMENT_SINGLELINE;
            }
          // fall through
          case 151: break;
          case 36:
            { return OpenSCADTypes.LE;
            }
          // fall through
          case 152: break;
          case 37:
            { return OpenSCADTypes.EQ;
            }
          // fall through
          case 153: break;
          case 38:
            { return OpenSCADTypes.GE;
            }
          // fall through
          case 154: break;
          case 39:
            { return OpenSCADTypes.IF_KEYWORD;
            }
          // fall through
          case 155: break;
          case 40:
            { return OpenSCADTypes.OR;
            }
          // fall through
          case 156: break;
          case 41:
            { return OpenSCADTypes.FOR_KEYWORD;
            }
          // fall through
          case 157: break;
          case 42:
            { return OpenSCADTypes.LET_KEYWORD;
            }
          // fall through
          case 158: break;
          case 43:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return OpenSCADTypes.LN_KEYWORD;
            }
          // fall through
          case 159: break;
          case 44:
            { return OpenSCADTypes.COMMENT_C_STYLE;
            }
          // fall through
          case 160: break;
          case 45:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.ABS_KEYWORD;
            }
          // fall through
          case 161: break;
          case 46:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.CHR_KEYWORD;
            }
          // fall through
          case 162: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.COS_KEYWORD;
            }
          // fall through
          case 163: break;
          case 48:
            { return OpenSCADTypes.EACH_KEYWORD;
            }
          // fall through
          case 164: break;
          case 49:
            { return OpenSCADTypes.ELSE_KEYWORD;
            }
          // fall through
          case 165: break;
          case 50:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.EXP_KEYWORD;
            }
          // fall through
          case 166: break;
          case 51:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.LEN_KEYWORD;
            }
          // fall through
          case 167: break;
          case 52:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.LOG_KEYWORD;
            }
          // fall through
          case 168: break;
          case 53:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.MAX_KEYWORD;
            }
          // fall through
          case 169: break;
          case 54:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.MIN_KEYWORD;
            }
          // fall through
          case 170: break;
          case 55:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.ORD_KEYWORD;
            }
          // fall through
          case 171: break;
          case 56:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.POW_KEYWORD;
            }
          // fall through
          case 172: break;
          case 57:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.SIN_KEYWORD;
            }
          // fall through
          case 173: break;
          case 58:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.STR_KEYWORD;
            }
          // fall through
          case 174: break;
          case 59:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return OpenSCADTypes.TAN_KEYWORD;
            }
          // fall through
          case 175: break;
          case 60:
            { return OpenSCADTypes.TRUE_KEYWORD;
            }
          // fall through
          case 176: break;
          case 61:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(IMPORT_PATH_STATE); return OpenSCADTypes.USE_KEYWORD;
            }
          // fall through
          case 177: break;
          case 62:
            { return OpenSCADTypes.COMMENT_DOC;
            }
          // fall through
          case 178: break;
          case 63:
            { return OpenSCADTypes.COMMENT_CUSTOMIZER_VALUE;
            }
          // fall through
          case 179: break;
          case 64:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.ACOS_KEYWORD;
            }
          // fall through
          case 180: break;
          case 65:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.ASIN_KEYWORD;
            }
          // fall through
          case 181: break;
          case 66:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.ATAN_KEYWORD;
            }
          // fall through
          case 182: break;
          case 67:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.CEIL_KEYWORD;
            }
          // fall through
          case 183: break;
          case 68:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.ECHO_KEYWORD;
            }
          // fall through
          case 184: break;
          case 69:
            { return OpenSCADTypes.FALSE_KEYWORD;
            }
          // fall through
          case 185: break;
          case 70:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.NORM_KEYWORD;
            }
          // fall through
          case 186: break;
          case 71:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.SIGN_KEYWORD;
            }
          // fall through
          case 187: break;
          case 72:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.SQRT_KEYWORD;
            }
          // fall through
          case 188: break;
          case 73:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return OpenSCADTypes.TEXT_KEYWORD;
            }
          // fall through
          case 189: break;
          case 74:
            { return OpenSCADTypes.UNDEF_KEYWORD;
            }
          // fall through
          case 190: break;
          case 75:
            { return OpenSCADTypes.COMMENT_SINGLELINE_BLOCK;
            }
          // fall through
          case 191: break;
          case 76:
            { return OpenSCADTypes.ASSIGN_KEYWORD;
            }
          // fall through
          case 192: break;
          case 77:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.ATAN2_KEYWORD;
            }
          // fall through
          case 193: break;
          case 78:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.CHILD_KEYWORD;
            }
          // fall through
          case 194: break;
          case 79:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.COLOR_KEYWORD;
            }
          // fall through
          case 195: break;
          case 80:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.CROSS_KEYWORD;
            }
          // fall through
          case 196: break;
          case 81:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.FLOOR_KEYWORD;
            }
          // fall through
          case 197: break;
          case 82:
            { yybegin(BUILTIN_OVERRIDABLE); return OpenSCADTypes.MODULE_KEYWORD;
            }
          // fall through
          case 198: break;
          case 83:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.RANDS_KEYWORD;
            }
          // fall through
          case 199: break;
          case 84:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return OpenSCADTypes.ROUND_KEYWORD;
            }
          // fall through
          case 200: break;
          case 85:
            { return OpenSCADTypes.COMMENT_CUSTOMIZER_TABS;
            }
          // fall through
          case 201: break;
          case 86:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.ASSERT_KEYWORD;
            }
          // fall through
          case 202: break;
          case 87:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.CONCAT_KEYWORD;
            }
          // fall through
          case 203: break;
          case 88:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 204: break;
          case 89:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.IS_NUM_KEYWORD;
            }
          // fall through
          case 205: break;
          case 90:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.LOOKUP_KEYWORD;
            }
          // fall through
          case 206: break;
          case 91:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.RENDER_KEYWORD;
            }
          // fall through
          case 207: break;
          case 92:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.RESIZE_KEYWORD;
            }
          // fall through
          case 208: break;
          case 93:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.ROTATE_KEYWORD;
            }
          // fall through
          case 209: break;
          case 94:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 6);
            { return OpenSCADTypes.SEARCH_KEYWORD;
            }
          // fall through
          case 210: break;
          case 95:
            { yybegin(BUILTIN_OVERRIDABLE); return OpenSCADTypes.FUNCTION_KEYWORD;
            }
          // fall through
          case 211: break;
          case 96:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { yybegin(IMPORT_PATH_STATE); return OpenSCADTypes.INCLUDE_KEYWORD;
            }
          // fall through
          case 212: break;
          case 97:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { return OpenSCADTypes.IS_BOOL_KEYWORD;
            }
          // fall through
          case 213: break;
          case 98:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { return OpenSCADTypes.IS_LIST_KEYWORD;
            }
          // fall through
          case 214: break;
          case 99:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { return OpenSCADTypes.POLYGON_KEYWORD;
            }
          // fall through
          case 215: break;
          case 100:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { return OpenSCADTypes.SURFACE_KEYWORD;
            }
          // fall through
          case 216: break;
          case 101:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { return OpenSCADTypes.VERSION_KEYWORD;
            }
          // fall through
          case 217: break;
          case 102:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 8);
            { return OpenSCADTypes.CHILDREN_KEYWORD;
            }
          // fall through
          case 218: break;
          case 103:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 8);
            { return OpenSCADTypes.IS_UNDEF_KEYWORD;
            }
          // fall through
          case 219: break;
          case 104:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { return OpenSCADTypes.IS_STRING_KEYWORD;
            }
          // fall through
          case 220: break;
          case 105:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { return OpenSCADTypes.MINKOWSKI_KEYWORD;
            }
          // fall through
          case 221: break;
          case 106:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 10);
            { return OpenSCADTypes.IMPORT_DXF_KEYWORD;
            }
          // fall through
          case 222: break;
          case 107:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 10);
            { return OpenSCADTypes.IMPORT_STL_KEYWORD;
            }
          // fall through
          case 223: break;
          case 108:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 10);
            { return OpenSCADTypes.MULTMATRIX_KEYWORD;
            }
          // fall through
          case 224: break;
          case 109:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 10);
            { return OpenSCADTypes.POLYHEDRON_KEYWORD;
            }
          // fall through
          case 225: break;
          case 110:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 10);
            { return OpenSCADTypes.PROJECTION_KEYWORD;
            }
          // fall through
          case 226: break;
          case 111:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 11);
            { return OpenSCADTypes.IS_FUNCTION_KEYWORD;
            }
          // fall through
          case 227: break;
          case 112:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 11);
            { return OpenSCADTypes.VERSION_NUM_KEYWORD;
            }
          // fall through
          case 228: break;
          case 113:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 13);
            { return OpenSCADTypes.PARENT_MODULE_KEYWORD;
            }
          // fall through
          case 229: break;
          case 114:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 14);
            { return OpenSCADTypes.LINEAR_EXTRUDE_KEYWORD;
            }
          // fall through
          case 230: break;
          case 115:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 14);
            { return OpenSCADTypes.ROTATE_EXTRUDE_KEYWORD;
            }
          // fall through
          case 231: break;
          case 116:
            { return OpenSCADTypes.INTERSECTION_FOR_KEYWORD;
            }
          // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
