/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad.flex</tt>
 */
class OpenSCADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\57\1\34\1\56\1\26\1\45\1\60\1\0\1\50"+
    "\1\51\1\11\1\32\1\43\1\44\1\30\1\10\12\27\1\47\1\42\1\6\1\25\1\7\1\46\1\0"+
    "\4\26\1\31\25\26\1\54\1\33\1\55\1\0\1\26\1\0\1\35\1\26\1\22\1\14\1\17\1\20"+
    "\1\40\1\41\1\24\2\26\1\16\1\12\1\21\1\13\2\26\1\37\1\36\1\23\1\15\5\26\1\52"+
    "\1\61\1\53\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\3\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\10\1\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\2\1\3\1\6"+
    "\1\33\1\3\1\34\1\35\4\0\1\36\1\37\1\40"+
    "\1\41\12\1\1\42\1\1\1\43\1\1\1\11\1\0"+
    "\1\14\1\1\1\44\1\45\1\46\1\0\1\40\5\0"+
    "\1\41\1\47\3\1\1\50\2\1\1\51\4\1\1\11"+
    "\2\0\1\1\1\0\1\40\12\0\2\47\2\1\1\0"+
    "\1\52\1\53\1\54\2\1\1\55\1\1\1\11\1\1"+
    "\1\0\3\40\1\56\4\0\1\56\2\0\1\41\1\0"+
    "\1\1\1\57\1\1\1\60\2\1\3\0\1\56\3\40"+
    "\4\0\1\61\2\1\1\62\3\0\2\40\3\0\2\1"+
    "\2\0\2\40\3\0\1\63\1\0\1\64\2\0\2\40"+
    "\4\0\1\56\1\40\1\56\1\0\1\56\1\0\1\40"+
    "\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\372\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\372\0\u041a"+
    "\0\u044c\0\372\0\372\0\372\0\372\0\372\0\372\0\372"+
    "\0\372\0\372\0\372\0\372\0\372\0\372\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\372\0\372\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\372\0\372\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u0226\0\u08fc\0\372\0\u092e\0\u0960\0\u0992\0\372"+
    "\0\u09c4\0\372\0\372\0\372\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0672\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0226\0\u0c1c\0\u0c4e\0\u0226\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\372\0\u0f6e\0\u0fa0\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\372\0\u1036\0\u1068\0\u109a\0\372\0\u0226\0\u0226"+
    "\0\u10cc\0\u10fe\0\u0226\0\u1130\0\u0d7a\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u0a28\0\u125c\0\u128e\0\u12c0\0\u12f2\0\372"+
    "\0\u1324\0\u1356\0\372\0\u1388\0\u13ba\0\u0226\0\u13ec\0\u0226"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u0e10\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u0226\0\u1676\0\u16a8"+
    "\0\u0226\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\u19fa\0\u0226\0\u1a2c\0\372\0\u1a5e\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u11f8\0\u1bee\0\u12c0"+
    "\0\u1c20\0\u14b4\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\2\15\1\22\1\23\1\24"+
    "\1\15\1\25\1\26\1\15\1\27\1\6\1\30\1\31"+
    "\4\15\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\6\3\7\2\52\1\10\1\11\1\53\1\13"+
    "\1\14\2\15\1\16\1\17\1\20\1\21\2\15\1\22"+
    "\1\23\1\24\1\15\1\25\1\26\1\15\1\27\1\6"+
    "\1\30\1\31\4\15\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\54\5\55\1\56\1\57\52\54"+
    "\4\0\2\4\2\0\1\60\70\0\1\61\1\0\1\62"+
    "\3\0\1\63\117\0\5\7\101\0\1\64\61\0\1\65"+
    "\44\0\1\66\1\67\62\0\1\15\1\70\11\15\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\32\0\13\15\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\32\0\7\15\1\71"+
    "\3\15\1\0\2\15\1\0\1\15\3\0\1\15\1\72"+
    "\3\15\32\0\5\15\1\73\5\15\1\0\2\15\1\0"+
    "\1\15\3\0\5\15\32\0\4\15\1\74\6\15\1\0"+
    "\2\15\1\0\1\15\3\0\1\75\4\15\32\0\1\15"+
    "\1\76\1\15\1\77\7\15\1\0\2\15\1\0\1\15"+
    "\3\0\1\100\4\15\32\0\13\15\1\0\2\15\1\0"+
    "\1\15\3\0\2\15\1\101\2\15\32\0\6\15\1\102"+
    "\1\103\3\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\45\0\1\104\46\0\5\15\1\105\5\15\1\0\1\15"+
    "\1\25\1\106\1\105\3\0\5\15\47\0\1\106\32\0"+
    "\33\30\1\107\1\110\25\30\12\0\13\15\1\0\2\15"+
    "\1\0\1\15\3\0\1\15\1\111\3\15\45\0\1\112"+
    "\114\0\1\113\62\0\1\114\1\0\3\7\2\52\2\0"+
    "\1\115\61\0\1\116\1\67\50\0\6\54\2\0\53\54"+
    "\5\55\2\0\52\54\10\0\1\117\67\0\1\120\56\0"+
    "\1\121\47\0\3\122\1\63\1\122\4\0\13\123\1\0"+
    "\2\123\1\0\1\123\3\0\5\123\20\0\2\66\2\0"+
    "\56\66\11\124\1\125\50\124\12\0\2\15\1\126\10\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\32\0\2\15"+
    "\1\127\10\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\32\0\5\15\1\130\5\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\32\0\11\15\1\131\1\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\32\0\13\15\1\0\2\15"+
    "\1\0\1\15\3\0\1\15\1\132\3\15\32\0\10\15"+
    "\1\133\2\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\32\0\13\15\1\0\2\15\1\0\1\15\3\0\2\15"+
    "\1\134\2\15\32\0\7\15\1\135\3\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\32\0\4\15\1\136\6\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\32\0\3\15"+
    "\1\137\7\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\32\0\10\15\1\140\2\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\32\0\13\15\1\0\1\15\1\141\1\0"+
    "\1\15\1\142\2\0\5\15\2\0\1\142\34\0\1\143"+
    "\7\0\1\106\1\0\1\143\30\0\62\30\12\0\13\15"+
    "\1\0\2\15\1\0\1\15\3\0\1\15\1\144\3\15"+
    "\30\0\1\145\51\0\1\116\1\146\1\147\1\150\1\116"+
    "\1\146\54\116\2\117\1\4\1\151\56\117\15\0\1\152"+
    "\70\0\1\153\36\0\1\154\1\155\1\154\1\156\1\157"+
    "\4\0\13\123\1\0\2\123\1\0\1\123\3\0\5\123"+
    "\20\0\11\124\1\160\50\124\10\161\1\162\1\125\50\161"+
    "\12\0\3\15\1\163\7\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\32\0\5\15\1\164\5\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\21\0\5\165\1\166\3\0"+
    "\13\15\1\0\2\15\1\0\1\15\3\0\5\15\32\0"+
    "\5\15\1\167\5\15\1\0\2\15\1\0\1\15\3\0"+
    "\5\15\32\0\13\15\1\0\2\15\1\0\1\15\3\0"+
    "\4\15\1\170\32\0\10\15\1\171\2\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\32\0\13\15\1\0\2\15"+
    "\1\0\1\15\3\0\1\15\1\172\3\15\32\0\5\15"+
    "\1\173\5\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\32\0\4\15\1\174\6\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\32\0\13\15\1\0\1\15\1\141\1\0"+
    "\1\15\3\0\5\15\47\0\1\175\61\0\1\175\2\0"+
    "\1\142\11\0\1\142\27\0\12\15\1\176\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\20\0\1\145\1\177\1\147"+
    "\1\150\1\145\1\177\54\145\1\116\1\146\1\147\1\150"+
    "\2\146\4\116\1\200\5\201\1\202\4\201\1\203\2\201"+
    "\1\116\1\201\3\116\5\201\20\116\1\0\3\204\2\147"+
    "\2\0\1\115\1\0\1\205\5\206\1\207\4\206\1\210"+
    "\2\206\1\0\1\206\3\0\5\206\21\0\1\204\1\147"+
    "\1\204\2\147\2\0\1\115\1\0\1\205\5\206\1\207"+
    "\4\206\1\210\2\206\1\0\1\206\3\0\5\206\22\0"+
    "\1\4\1\0\2\4\2\0\1\60\65\0\1\211\70\0"+
    "\1\212\41\0\1\154\57\0\1\154\1\155\1\154\1\156"+
    "\1\157\54\0\10\124\1\213\1\160\50\124\11\161\1\214"+
    "\50\161\12\0\4\15\1\215\6\15\1\0\2\15\1\0"+
    "\1\15\3\0\5\15\32\0\6\15\1\216\4\15\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\21\0\5\165\1\166"+
    "\65\0\11\15\1\217\1\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\32\0\5\15\1\220\5\15\1\0\2\15"+
    "\1\0\1\15\3\0\5\15\32\0\3\15\1\221\7\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\32\0\13\15"+
    "\1\0\2\15\1\0\1\15\3\0\3\15\1\222\1\15"+
    "\20\0\1\145\1\177\1\147\1\150\2\177\4\145\1\223"+
    "\5\224\1\225\4\224\1\226\2\224\1\145\1\224\3\145"+
    "\5\224\20\145\1\116\1\146\1\147\1\150\1\227\1\146"+
    "\4\116\1\201\1\230\11\201\1\203\2\201\1\116\1\201"+
    "\3\116\5\201\21\116\1\146\1\147\1\150\1\227\1\146"+
    "\4\116\13\201\1\203\2\201\1\116\1\201\3\116\5\201"+
    "\21\116\1\146\1\147\1\150\1\227\1\146\4\116\3\201"+
    "\1\231\7\201\1\203\2\201\1\116\1\201\3\116\5\201"+
    "\20\116\1\0\5\204\17\0\1\210\35\0\5\204\4\0"+
    "\1\206\1\232\11\206\1\210\2\206\1\0\1\206\3\0"+
    "\5\206\21\0\5\204\4\0\13\206\1\210\2\206\1\0"+
    "\1\206\3\0\5\206\21\0\5\204\4\0\3\206\1\233"+
    "\7\206\1\210\2\206\1\0\1\206\3\0\5\206\33\0"+
    "\1\234\70\0\1\235\37\0\10\161\1\162\1\214\50\161"+
    "\12\0\5\15\1\236\5\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\32\0\12\15\1\237\1\0\2\15\1\0"+
    "\1\15\3\0\5\15\32\0\2\15\1\240\10\15\1\0"+
    "\2\15\1\0\1\15\3\0\5\15\32\0\7\15\1\241"+
    "\3\15\1\0\2\15\1\0\1\15\3\0\5\15\20\0"+
    "\1\145\1\177\1\147\1\150\1\242\1\177\4\145\1\224"+
    "\1\243\11\224\1\226\2\224\1\145\1\224\3\145\5\224"+
    "\21\145\1\177\1\147\1\150\1\242\1\177\4\145\13\224"+
    "\1\226\2\224\1\145\1\224\3\145\5\224\21\145\1\177"+
    "\1\147\1\150\1\242\1\177\4\145\3\224\1\244\7\224"+
    "\1\226\2\224\1\145\1\224\3\145\5\224\20\145\1\116"+
    "\1\146\1\147\1\150\1\227\1\146\17\116\1\203\35\116"+
    "\1\146\1\147\1\150\1\227\1\146\4\116\2\201\1\245"+
    "\10\201\1\203\2\201\1\116\1\201\3\116\5\201\21\116"+
    "\1\146\1\147\1\150\1\227\1\146\4\116\7\201\1\246"+
    "\3\201\1\203\2\201\1\116\1\201\3\116\5\201\20\116"+
    "\1\0\5\204\4\0\2\206\1\247\10\206\1\210\2\206"+
    "\1\0\1\206\3\0\5\206\21\0\5\204\4\0\7\206"+
    "\1\250\3\206\1\210\2\206\1\0\1\206\3\0\5\206"+
    "\32\0\1\156\70\0\1\251\52\0\1\15\1\252\11\15"+
    "\1\0\2\15\1\0\1\15\3\0\5\15\32\0\5\15"+
    "\1\253\5\15\1\0\2\15\1\0\1\15\3\0\5\15"+
    "\20\0\1\145\1\177\1\147\1\150\1\242\1\177\17\145"+
    "\1\226\35\145\1\177\1\147\1\150\1\242\1\177\4\145"+
    "\2\224\1\254\10\224\1\226\2\224\1\145\1\224\3\145"+
    "\5\224\21\145\1\177\1\147\1\150\1\242\1\177\4\145"+
    "\7\224\1\255\3\224\1\226\2\224\1\145\1\224\3\145"+
    "\5\224\20\145\1\116\1\146\1\147\1\150\1\227\1\146"+
    "\4\116\3\201\1\256\7\201\1\203\2\201\1\116\1\201"+
    "\3\116\5\201\21\116\1\146\1\147\1\150\1\227\1\146"+
    "\4\116\10\201\1\257\2\201\1\203\2\201\1\116\1\201"+
    "\3\116\5\201\20\116\1\0\5\204\4\0\3\206\1\260"+
    "\7\206\1\210\2\206\1\0\1\206\3\0\5\206\21\0"+
    "\5\204\4\0\10\206\1\261\2\206\1\210\2\206\1\0"+
    "\1\206\3\0\5\206\35\0\1\262\56\0\7\15\1\263"+
    "\3\15\1\0\2\15\1\0\1\15\3\0\5\15\21\0"+
    "\5\264\1\265\3\0\13\15\1\0\2\15\1\0\1\15"+
    "\3\0\5\15\20\0\1\145\1\177\1\147\1\150\1\242"+
    "\1\177\4\145\3\224\1\266\7\224\1\226\2\224\1\145"+
    "\1\224\3\145\5\224\21\145\1\177\1\147\1\150\1\242"+
    "\1\177\4\145\10\224\1\267\2\224\1\226\2\224\1\145"+
    "\1\224\3\145\5\224\20\145\1\116\1\146\1\147\1\150"+
    "\1\227\1\146\4\116\4\201\1\270\6\201\1\203\2\201"+
    "\1\116\1\201\3\116\5\201\21\116\1\146\1\147\1\150"+
    "\1\227\1\146\4\116\11\201\1\271\1\201\1\203\2\201"+
    "\1\116\1\201\3\116\5\201\20\116\1\0\5\204\4\0"+
    "\4\206\1\272\6\206\1\210\2\206\1\0\1\206\3\0"+
    "\5\206\21\0\5\204\4\0\11\206\1\273\1\206\1\210"+
    "\2\206\1\0\1\206\3\0\5\206\40\0\1\156\42\0"+
    "\5\264\1\265\53\0\1\145\1\177\1\147\1\150\1\242"+
    "\1\177\4\145\4\224\1\274\6\224\1\226\2\224\1\145"+
    "\1\224\3\145\5\224\21\145\1\177\1\147\1\150\1\242"+
    "\1\177\4\145\11\224\1\275\1\224\1\226\2\224\1\145"+
    "\1\224\3\145\5\224\20\145\1\116\1\146\1\147\1\150"+
    "\1\227\1\146\4\116\5\201\1\276\5\201\1\203\2\201"+
    "\1\116\1\201\3\116\5\201\21\116\1\146\1\147\1\150"+
    "\1\227\1\146\4\116\12\201\1\277\1\203\2\201\1\116"+
    "\1\201\3\116\5\201\20\116\1\0\5\204\4\0\5\206"+
    "\1\300\5\206\1\210\2\206\1\0\1\206\3\0\5\206"+
    "\21\0\5\204\4\0\12\206\1\301\1\210\2\206\1\0"+
    "\1\206\3\0\5\206\20\0\1\145\1\177\1\147\1\150"+
    "\1\242\1\177\4\145\5\224\1\302\5\224\1\226\2\224"+
    "\1\145\1\224\3\145\5\224\21\145\1\177\1\147\1\150"+
    "\1\242\1\177\4\145\12\224\1\303\1\226\2\224\1\145"+
    "\1\224\3\145\5\224\20\145\1\116\1\146\1\147\1\150"+
    "\1\227\1\146\4\116\1\201\1\304\11\201\1\203\2\201"+
    "\1\116\1\201\3\116\5\201\20\116\1\0\5\204\4\0"+
    "\1\206\1\305\11\206\1\210\2\206\1\0\1\206\3\0"+
    "\5\206\20\0\1\145\1\177\1\147\1\150\1\242\1\177"+
    "\4\145\1\224\1\306\11\224\1\226\2\224\1\145\1\224"+
    "\3\145\5\224\20\145\1\116\1\146\1\147\1\150\1\227"+
    "\1\146\4\116\7\201\1\276\3\201\1\203\2\201\1\116"+
    "\1\201\3\116\5\201\20\116\1\0\5\204\4\0\7\206"+
    "\1\300\3\206\1\210\2\206\1\0\1\206\3\0\5\206"+
    "\20\0\1\145\1\177\1\147\1\150\1\242\1\177\4\145"+
    "\7\224\1\302\3\224\1\226\2\224\1\145\1\224\3\145"+
    "\5\224\20\145";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\3\0\1\11\4\1\1\11\13\1\1\11\2\1"+
    "\15\11\7\1\2\11\4\0\2\11\16\1\1\11\2\1"+
    "\1\0\1\11\1\1\3\11\1\0\2\1\2\0\1\1"+
    "\1\0\16\1\2\0\1\1\1\0\1\1\5\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\11\10\1\1\0\4\1\4\0\1\11\2\0\1\11"+
    "\1\0\6\1\3\0\4\1\4\0\4\1\3\0\2\1"+
    "\3\0\2\1\2\0\2\1\3\0\1\1\1\0\1\11"+
    "\2\0\2\1\4\0\3\1\1\0\1\1\1\0\1\1"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 53: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 4: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 56: break;
          case 5: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 57: break;
          case 6: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 58: break;
          case 7: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 59: break;
          case 8: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 60: break;
          case 9: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 61: break;
          case 10: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 62: break;
          case 11: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 63: break;
          case 12: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 64: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 65: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 66: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 67: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 68: break;
          case 17: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 69: break;
          case 18: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 70: break;
          case 19: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 71: break;
          case 20: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 72: break;
          case 21: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 73: break;
          case 22: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 74: break;
          case 23: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 75: break;
          case 24: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 76: break;
          case 25: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 77: break;
          case 26: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 78: break;
          case 27: 
            { return OpenSCADTypes.IMPORT_PATH;
            } 
            // fall through
          case 79: break;
          case 28: 
            { return OpenSCADTypes.IMPORT_START;
            } 
            // fall through
          case 80: break;
          case 29: 
            { yybegin(YYINITIAL); return OpenSCADTypes.IMPORT_END;
            } 
            // fall through
          case 81: break;
          case 30: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 82: break;
          case 31: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 83: break;
          case 32: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 84: break;
          case 33: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 85: break;
          case 34: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 86: break;
          case 35: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 87: break;
          case 36: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 88: break;
          case 37: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 89: break;
          case 38: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 90: break;
          case 39: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 91: break;
          case 40: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 41: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 42: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(IMPORT_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 43: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 44: 
            { return OpenSCADTypes.EACH_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 45: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 46: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 98: break;
          case 47: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 48: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 49: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 50: 
            { return OpenSCADTypes.ASSIGN_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 51: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(IMPORT_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
