/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad_highlighter.flex</tt>
 */
class OpenSCADHighlightingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDE_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\73\1\34\1\72\1\0\1\61\1\74\1\0\1\64\1"+
    "\65\1\11\1\32\1\57\1\60\1\30\1\10\2\27\1\54\7\27\1\63\1\56\1\6\1\25\1\7\1"+
    "\62\1\0\4\26\1\31\25\26\1\70\1\33\1\71\1\0\1\41\1\0\1\35\1\51\1\22\1\14\1"+
    "\17\1\20\1\40\1\46\1\24\1\50\1\44\1\16\1\12\1\21\1\13\1\47\1\53\1\37\1\36"+
    "\1\23\1\15\1\55\1\45\1\42\1\52\1\43\1\66\1\75\1\67\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\3\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\13\1\1\10\1\1\1\11\1\12\1\13\1\14\6\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\2\1\3"+
    "\1\6\1\33\1\3\1\34\1\35\4\0\1\36\1\37"+
    "\1\40\1\41\12\1\1\42\24\1\1\43\1\1\1\44"+
    "\1\1\1\11\1\0\1\14\23\1\1\45\1\46\1\47"+
    "\1\0\1\40\5\0\1\41\1\50\2\1\1\42\7\1"+
    "\1\51\4\1\1\52\22\1\1\11\2\0\23\1\1\0"+
    "\1\40\12\0\2\50\7\1\1\0\1\53\3\1\1\54"+
    "\1\55\7\1\1\56\4\1\1\11\1\42\13\1\1\57"+
    "\4\1\1\0\3\40\1\60\4\0\1\60\2\0\1\41"+
    "\1\0\5\1\1\61\3\1\1\62\1\55\15\1\3\0"+
    "\1\60\3\40\4\0\1\63\10\1\1\55\2\1\1\57"+
    "\5\1\3\0\2\40\3\0\15\1\1\42\2\0\2\40"+
    "\3\0\4\1\1\64\2\1\1\0\1\65\3\1\2\0"+
    "\2\40\2\0\7\1\2\0\1\60\1\40\1\60\1\0"+
    "\3\1\1\60\1\0\1\40\1\0\3\1\1\0\1\1"+
    "\1\57\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u0136\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u0136\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0136\0\u0136"+
    "\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0136\0\u0136\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0554\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u0554"+
    "\0\u122a\0\u0136\0\u1268\0\u12a6\0\u12e4\0\u0136\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u0136\0\u0136\0\u0136\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u0a2c\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u0554"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u0554\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c"+
    "\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c"+
    "\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c"+
    "\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u0136\0\u2872\0\u28b0\0\u28b0"+
    "\0\u28ee\0\u292c\0\u0136\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u0136\0\u2b5a\0\u2b98\0\u2bd6\0\u0554"+
    "\0\u0554\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u0554\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u21aa\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u0554\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u17fa\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u0136\0\u348e\0\u34cc\0\u0136\0\u350a\0\u3548\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u0554\0\u367e\0\u36bc\0\u36fa\0\u0554\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u26c0\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca"+
    "\0\u0554\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c"+
    "\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3dc2\0\u3fb2\0\u3ff0\0\u402e"+
    "\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e"+
    "\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e"+
    "\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe"+
    "\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee"+
    "\0\u482c\0\u486a\0\u48a8\0\u0554\0\u48e6\0\u4924\0\u4962\0\u0136"+
    "\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52"+
    "\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42"+
    "\0\u4d80\0\u4dbe\0\u331a\0\u4dfc\0\u3412\0\u4e3a\0\u4e78\0\u4eb6"+
    "\0\u4ef4\0\u3ada\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068"+
    "\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\30\1\33\1\6"+
    "\1\34\1\35\1\36\1\37\6\30\1\40\1\41\4\30"+
    "\1\31\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\6\3\7\2\63\1\10\1\11\1\64"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\30\1\33\1\6\1\34\1\35\1\36\1\37\6\30"+
    "\1\40\1\41\4\30\1\31\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\65\5\66\1\67"+
    "\1\70\66\65\4\0\2\4\2\0\1\71\104\0\1\72"+
    "\1\0\1\73\3\0\1\74\147\0\5\7\115\0\1\75"+
    "\75\0\1\76\60\0\1\77\1\100\76\0\1\30\1\101"+
    "\1\30\1\102\6\30\1\103\1\0\2\30\1\0\1\30"+
    "\3\0\1\104\20\30\32\0\6\30\1\105\4\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\12\30\1\106"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\107\3\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\110\17\30\32\0\1\30\1\111\3\30\1\112\1\30"+
    "\1\113\2\30\1\114\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\4\30\1\115\3\30\1\116\2\30\1\0"+
    "\2\30\1\0\1\30\3\0\5\30\1\117\13\30\32\0"+
    "\1\30\1\120\1\30\1\121\1\122\6\30\1\0\2\30"+
    "\1\0\1\30\3\0\1\123\20\30\32\0\1\30\1\124"+
    "\11\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\1\30\1\125\1\30\1\126\1\30\1\127\4\30\1\130"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\131\6\30"+
    "\1\132\3\30\1\133\3\30\32\0\5\30\1\134\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\135\1\30\1\136"+
    "\16\30\32\0\1\137\5\30\1\140\1\141\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\45\0\1\142\62\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\5\30\1\143\5\30\1\0\1\30\1\31\1\144\1\143"+
    "\3\0\17\30\1\31\1\30\47\0\1\144\24\0\1\144"+
    "\21\0\33\34\1\145\1\146\41\34\12\0\10\30\1\147"+
    "\1\150\1\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\151\12\30\1\152\4\30\32\0\3\30\1\153\1\30"+
    "\1\154\2\30\1\155\1\156\1\157\1\0\2\30\1\0"+
    "\1\30\3\0\12\30\1\160\3\30\1\161\2\30\32\0"+
    "\1\30\1\162\3\30\1\163\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\164\20\30\32\0\3\30\1\165\7\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\1\30"+
    "\1\166\11\30\1\0\2\30\1\0\1\30\3\0\1\167"+
    "\1\30\1\170\16\30\32\0\5\30\1\171\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\45\0\1\172\144\0"+
    "\1\173\76\0\1\174\1\0\3\7\2\63\2\0\1\175"+
    "\75\0\1\176\1\100\64\0\6\65\2\0\67\65\5\66"+
    "\2\0\66\65\10\0\1\177\103\0\1\200\72\0\1\201"+
    "\63\0\3\202\1\74\1\202\4\0\13\203\1\0\2\203"+
    "\1\0\1\203\3\0\21\203\20\0\2\77\2\0\72\77"+
    "\11\204\1\205\64\204\12\0\2\30\1\206\10\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\4\30\1\207"+
    "\6\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\7\30\1\210\3\30\1\0\2\30\1\0\1\30\3\0"+
    "\2\30\1\211\16\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\5\30\1\113\13\30\32\0\6\30\1\212"+
    "\4\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\6\30\1\213\4\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\2\30\1\214\7\30\1\215\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\216\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\1\30"+
    "\1\217\11\30\1\0\2\30\1\0\1\30\3\0\3\30"+
    "\1\113\15\30\32\0\7\30\1\113\1\30\1\220\1\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\221\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\4\30\1\222\6\30\1\0\2\30\1\0\1\30"+
    "\3\0\1\30\1\223\17\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\11\30\1\224\7\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\12\30\1\113\6\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\2\30"+
    "\1\225\16\30\32\0\7\30\1\226\3\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\1\30\1\227\11\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\4\30"+
    "\1\230\6\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\2\30"+
    "\1\231\16\30\32\0\4\30\1\232\2\30\1\233\3\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\30\1\113\17\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\14\30"+
    "\1\234\4\30\32\0\12\30\1\235\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\236\16\30\32\0\1\30\1\237"+
    "\11\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\12\30\1\240\1\0\2\30\1\0\1\30\3\0\2\30"+
    "\1\113\16\30\32\0\4\30\1\241\6\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\5\30\1\242\13\30\32\0\7\30"+
    "\1\113\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\3\30\1\243\7\30\1\0\2\30\1\0\1\30"+
    "\3\0\1\244\20\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\12\30\1\245\6\30\32\0\10\30\1\246"+
    "\1\247\1\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\1\30\1\250\1\0\1\30\1\251"+
    "\2\0\17\30\1\250\1\30\2\0\1\251\34\0\1\252"+
    "\7\0\1\144\1\0\1\252\22\0\1\144\21\0\76\34"+
    "\12\0\1\30\1\152\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\1\253\20\30\32\0\12\30\1\135\1\0\2\30"+
    "\1\0\1\30\3\0\1\30\1\254\17\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\30\1\113\17\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\2\30"+
    "\1\255\16\30\32\0\4\30\1\256\6\30\1\0\2\30"+
    "\1\0\1\30\3\0\1\257\20\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\260\20\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\113\16\30"+
    "\32\0\7\30\1\113\3\30\1\0\2\30\1\0\1\30"+
    "\3\0\3\30\1\135\15\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\11\30\1\261\7\30\32\0\3\30"+
    "\1\262\7\30\1\0\2\30\1\0\1\30\3\0\2\30"+
    "\1\263\16\30\32\0\3\30\1\264\5\30\1\265\1\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\266\3\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\267\17\30\32\0\7\30\1\270\3\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\4\30\1\271\6\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\4\30"+
    "\1\272\6\30\1\0\2\30\1\0\1\30\3\0\10\30"+
    "\1\113\10\30\32\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\2\30\1\273\16\30\32\0\1\30\1\274\11\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\275\16\30"+
    "\30\0\1\276\65\0\1\176\1\277\1\300\1\301\1\176"+
    "\1\277\70\176\2\177\1\4\1\302\72\177\15\0\1\303"+
    "\104\0\1\304\52\0\1\305\1\306\1\305\1\307\1\310"+
    "\4\0\13\203\1\0\2\203\1\0\1\203\3\0\21\203"+
    "\20\0\11\204\1\311\64\204\10\312\1\313\1\205\64\312"+
    "\12\0\3\30\1\314\7\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\11\30\1\315\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\7\30\1\316\11\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\232\16\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\317\17\30\32\0\6\30\1\320\4\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\321\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\1\30"+
    "\1\322\11\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\21\0\5\323\1\324\3\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\7\30\1\325\11\30\32\0\5\30\1\326"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\12\30\1\327\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\5\30\1\330\5\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\1\30\1\331\11\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\10\30\1\332\2\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\1\30"+
    "\1\156\11\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\333\17\30\32\0\1\113\12\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\1\30\1\334\11\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\10\30\1\335"+
    "\2\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\5\30\1\331\5\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\4\30\1\113\6\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\10\30\1\336\2\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\30\1\152\17\30\32\0"+
    "\4\30\1\337\6\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\12\30\1\340\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\11\30\1\331\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\341\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\342\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\30\1\343\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\4\30\1\344\6\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\345\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\1\30\1\250\1\0\1\30\3\0\17\30\1\250"+
    "\1\30\47\0\1\346\24\0\1\346\50\0\1\346\2\0"+
    "\1\251\21\0\1\346\3\0\1\251\27\0\7\30\1\347"+
    "\3\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\5\30\1\350\4\30\1\351\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\6\30\1\352\4\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\353\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\354\16\30"+
    "\32\0\4\30\1\355\6\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\5\30\1\356\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\1\356\20\30\32\0\11\30\1\113"+
    "\1\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\7\30\1\357\3\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\360\20\30\32\0\2\30\1\361\10\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\12\30\1\362\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\2\30\1\152"+
    "\10\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\4\30\1\363\6\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\15\30\1\364\3\30\32\0\5\30\1\365\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\13\30\1\366\5\30\32\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\1\30\1\367"+
    "\17\30\20\0\1\276\1\370\1\300\1\301\1\276\1\370"+
    "\70\276\1\176\1\277\1\300\1\301\2\277\4\176\1\371"+
    "\5\372\1\373\4\372\1\374\2\372\1\176\1\372\3\176"+
    "\21\372\20\176\1\0\3\375\2\300\2\0\1\175\1\0"+
    "\1\376\5\377\1\u0100\4\377\1\u0101\2\377\1\0\1\377"+
    "\3\0\21\377\21\0\1\375\1\300\1\375\2\300\2\0"+
    "\1\175\1\0\1\376\5\377\1\u0100\4\377\1\u0101\2\377"+
    "\1\0\1\377\3\0\21\377\22\0\1\4\1\0\2\4"+
    "\2\0\1\71\101\0\1\u0102\104\0\1\u0103\55\0\1\305"+
    "\73\0\1\305\1\306\1\305\1\307\1\310\70\0\10\204"+
    "\1\u0104\1\311\64\204\11\312\1\u0105\64\312\12\0\4\30"+
    "\1\u0106\6\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\u0107\12\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\1\30\1\u0108\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\5\30\1\u0109\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\5\30\1\u010a"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\6\30\1\u010b\4\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\7\30\1\363\3\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\21\0\5\323\1\324\101\0\3\30"+
    "\1\117\7\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\1\u010c"+
    "\20\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\12\30\1\u010d\6\30\32\0\11\30\1\u010e\1\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\5\30\1\u010f"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\2\30\1\363"+
    "\16\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\263\20\30\32\0\4\30\1\234\6\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\2\30\1\u0110\10\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\u0111\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\u0112\17\30\32\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\2\30\1\u0113\16\30\32\0\3\30\1\u0114\7\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\u0115\16\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\17\30"+
    "\1\113\1\30\32\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\2\30\1\242\16\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\3\30\1\322\15\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\u0116\20\30\32\0"+
    "\10\30\1\263\2\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\10\30\1\u0117\2\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\5\30\1\363\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\234\16\30\32\0"+
    "\2\30\1\113\10\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\11\30\1\u0118\1\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\5\30\1\334\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\6\30\1\355\12\30\32\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\3\30\1\u0119"+
    "\5\30\1\u011a\7\30\32\0\7\30\1\u011b\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\5\30\1\u011c"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\12\30\1\u011d\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\20\0\1\276\1\370\1\300\1\301\2\370\4\276\1\u011e"+
    "\5\u011f\1\u0120\4\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\20\276\1\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\1\372\1\u0123\11\372\1\374\2\372\1\176\1\372"+
    "\3\176\21\372\21\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\13\372\1\374\2\372\1\176\1\372\3\176\21\372"+
    "\21\176\1\277\1\300\1\301\1\u0122\1\277\4\176\3\372"+
    "\1\u0124\7\372\1\374\2\372\1\176\1\372\3\176\21\372"+
    "\20\176\1\0\5\375\17\0\1\u0101\51\0\5\375\4\0"+
    "\1\377\1\u0125\11\377\1\u0101\2\377\1\0\1\377\3\0"+
    "\21\377\21\0\5\375\4\0\13\377\1\u0101\2\377\1\0"+
    "\1\377\3\0\21\377\21\0\5\375\4\0\3\377\1\u0126"+
    "\7\377\1\u0101\2\377\1\0\1\377\3\0\21\377\33\0"+
    "\1\u0127\104\0\1\u0128\53\0\10\312\1\313\1\u0105\64\312"+
    "\12\0\5\30\1\u0129\5\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\1\u012a\20\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\10\30\1\u012b\10\30\32\0\11\30\1\363"+
    "\1\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\2\30\1\u012c"+
    "\16\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\2\30\1\u012d\16\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\30\1\234\17\30\32\0\12\30\1\u012e"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\u012f\16\30"+
    "\32\0\2\30\1\u0130\10\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\4\30\1\u0131\6\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\11\30\1\u0132\1\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\2\30"+
    "\1\u0133\10\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\u0134\17\30\32\0\10\30\1\234\2\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\11\30\1\113\7\30\32\0\5\30"+
    "\1\u0135\5\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\30\1\u0136\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\5\30\1\u0137\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\11\30\1\u0138\1\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\10\30"+
    "\1\u0139\2\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\30\1\u013a\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\20\0\1\276\1\370\1\300\1\301\1\u013b"+
    "\1\370\4\276\1\u011f\1\u013c\11\u011f\1\u0121\2\u011f\1\276"+
    "\1\u011f\3\276\21\u011f\21\276\1\370\1\300\1\301\1\u013b"+
    "\1\370\4\276\13\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\21\276\1\370\1\300\1\301\1\u013b\1\370\4\276"+
    "\3\u011f\1\u013d\7\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\20\276\1\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\17\176\1\374\51\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\2\372\1\u013e\10\372\1\374\2\372\1\176\1\372"+
    "\3\176\21\372\21\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\7\372\1\u013f\3\372\1\374\2\372\1\176\1\372"+
    "\3\176\21\372\20\176\1\0\5\375\4\0\2\377\1\u0140"+
    "\10\377\1\u0101\2\377\1\0\1\377\3\0\21\377\21\0"+
    "\5\375\4\0\7\377\1\u0141\3\377\1\u0101\2\377\1\0"+
    "\1\377\3\0\21\377\32\0\1\307\104\0\1\u0142\66\0"+
    "\11\30\1\u0143\1\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\30\1\u0144\17\30\32\0\5\30\1\u0145\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\4\30\1\u0146\14\30\32\0"+
    "\1\30\1\u0147\11\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\5\30\1\u0136\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\5\30\1\u0148\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\u0149\20\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\4\30\1\u014a\14\30"+
    "\32\0\5\30\1\u014b\5\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\5\30\1\u014c\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\7\30\1\331\3\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\2\30"+
    "\1\u014d\10\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\2\30\1\0\1\30\3\0\4\30"+
    "\1\u014e\14\30\32\0\11\30\1\u014f\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\7\30\1\u0150\3\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\20\0\1\276"+
    "\1\370\1\300\1\301\1\u013b\1\370\17\276\1\u0121\51\276"+
    "\1\370\1\300\1\301\1\u013b\1\370\4\276\2\u011f\1\u0151"+
    "\10\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276\21\u011f\21\276"+
    "\1\370\1\300\1\301\1\u013b\1\370\4\276\7\u011f\1\u0152"+
    "\3\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276\21\u011f\20\276"+
    "\1\176\1\277\1\300\1\301\1\u0122\1\277\4\176\3\372"+
    "\1\u0153\7\372\1\374\2\372\1\176\1\372\3\176\21\372"+
    "\21\176\1\277\1\300\1\301\1\u0122\1\277\4\176\10\372"+
    "\1\u0154\2\372\1\374\2\372\1\176\1\372\3\176\21\372"+
    "\20\176\1\0\5\375\4\0\3\377\1\u0155\7\377\1\u0101"+
    "\2\377\1\0\1\377\3\0\21\377\21\0\5\375\4\0"+
    "\10\377\1\u0156\2\377\1\u0101\2\377\1\0\1\377\3\0"+
    "\21\377\35\0\1\u0157\72\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\u0158\16\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\7\30\1\u0159\11\30\32\0"+
    "\7\30\1\u015a\3\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\5\30\1\u015b\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\7\30\1\u015c\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\331\16\30\32\0"+
    "\11\30\1\355\1\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\2\30\1\u015d\10\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\30\1\u015e\17\30\21\0\5\u015f\1\u0160"+
    "\3\0\13\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\10\30\1\u0161\2\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\2\30\1\u0119\16\30\32\0\1\u0162\12\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\12\30\1\215"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\4\30\1\u0163\14\30"+
    "\20\0\1\276\1\370\1\300\1\301\1\u013b\1\370\4\276"+
    "\3\u011f\1\u0164\7\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\21\276\1\370\1\300\1\301\1\u013b\1\370\4\276"+
    "\10\u011f\1\u0165\2\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\20\276\1\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\4\372\1\u0166\6\372\1\374\2\372\1\176\1\372"+
    "\3\176\21\372\21\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\11\372\1\u0167\1\372\1\374\2\372\1\176\1\372"+
    "\3\176\21\372\20\176\1\0\5\375\4\0\4\377\1\u0168"+
    "\6\377\1\u0101\2\377\1\0\1\377\3\0\21\377\21\0"+
    "\5\375\4\0\11\377\1\u0169\1\377\1\u0101\2\377\1\0"+
    "\1\377\3\0\21\377\40\0\1\307\67\0\12\30\1\u016a"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\12\30"+
    "\1\363\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\10\30\1\355\2\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\5\30\1\u016b\13\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\5\30\1\u016c\13\30\32\0\11\30\1\u016d"+
    "\1\30\1\0\2\30\1\0\1\30\3\0\21\30\21\0"+
    "\5\u015f\1\u0160\101\0\11\30\1\u016e\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\1\30\1\u016f\11\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\u0170\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\20\0\1\276\1\370\1\300\1\301\1\u013b\1\370\4\276"+
    "\4\u011f\1\u0171\6\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\21\276\1\370\1\300\1\301\1\u013b\1\370\4\276"+
    "\11\u011f\1\u0172\1\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276"+
    "\21\u011f\20\276\1\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\5\372\1\u0173\5\372\1\374\2\372\1\176\1\372"+
    "\3\176\21\372\21\176\1\277\1\300\1\301\1\u0122\1\277"+
    "\4\176\12\372\1\u0174\1\374\2\372\1\176\1\372\3\176"+
    "\21\372\20\176\1\0\5\375\4\0\5\377\1\u0175\5\377"+
    "\1\u0101\2\377\1\0\1\377\3\0\21\377\21\0\5\375"+
    "\4\0\12\377\1\u0176\1\u0101\2\377\1\0\1\377\3\0"+
    "\21\377\32\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\5\30\1\363\13\30\32\0\11\30\1\u0177\1\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\6\30\1\331"+
    "\4\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\4\30\1\331\6\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\32\0\12\30\1\u0178\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\32\0\2\30\1\u0179\10\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\32\0\3\30\1\231\7\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\20\0\1\276"+
    "\1\370\1\300\1\301\1\u013b\1\370\4\276\5\u011f\1\u017a"+
    "\5\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276\21\u011f\21\276"+
    "\1\370\1\300\1\301\1\u013b\1\370\4\276\12\u011f\1\u017b"+
    "\1\u0121\2\u011f\1\276\1\u011f\3\276\21\u011f\20\276\1\176"+
    "\1\277\1\300\1\301\1\u0122\1\277\4\176\1\372\1\u017c"+
    "\11\372\1\374\2\372\1\176\1\372\3\176\21\372\20\176"+
    "\1\0\5\375\4\0\1\377\1\u017d\11\377\1\u0101\2\377"+
    "\1\0\1\377\3\0\21\377\32\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\2\30\1\u017e\16\30\32\0\1\30"+
    "\1\u017f\11\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\32\0\3\30\1\u0180\7\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\20\0\1\276\1\370\1\300\1\301\1\u013b"+
    "\1\370\4\276\1\u011f\1\u0181\11\u011f\1\u0121\2\u011f\1\276"+
    "\1\u011f\3\276\21\u011f\20\276\1\176\1\277\1\300\1\301"+
    "\1\u0122\1\277\4\176\7\372\1\u0173\3\372\1\374\2\372"+
    "\1\176\1\372\3\176\21\372\20\176\1\0\5\375\4\0"+
    "\7\377\1\u0175\3\377\1\u0101\2\377\1\0\1\377\3\0"+
    "\21\377\32\0\3\30\1\u0182\7\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\7\30\1\u0183\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\32\0\4\30\1\u0184"+
    "\6\30\1\0\2\30\1\0\1\30\3\0\21\30\20\0"+
    "\1\276\1\370\1\300\1\301\1\u013b\1\370\4\276\7\u011f"+
    "\1\u017a\3\u011f\1\u0121\2\u011f\1\276\1\u011f\3\276\21\u011f"+
    "\20\276\12\0\2\30\1\355\10\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\4\30\1\u0185\14\30\32\0\5\30\1\113"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\32\0"+
    "\6\30\1\232\4\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20956];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\3\0\1\11\4\1\1\11\17\1\1\11\7\1"+
    "\15\11\7\1\2\11\4\0\2\11\43\1\1\11\2\1"+
    "\1\0\1\11\23\1\3\11\1\0\2\1\2\0\1\1"+
    "\1\0\45\1\2\0\23\1\1\0\1\1\5\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\7\1\1\0"+
    "\1\11\43\1\1\0\4\1\4\0\1\11\2\0\1\11"+
    "\1\0\30\1\3\0\4\1\4\0\22\1\3\0\2\1"+
    "\3\0\16\1\2\0\2\1\3\0\7\1\1\0\1\11"+
    "\3\1\2\0\2\1\2\0\7\1\2\0\3\1\1\0"+
    "\4\1\1\0\1\1\1\0\3\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 4: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 57: break;
          case 5: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 58: break;
          case 6: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 59: break;
          case 7: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 60: break;
          case 8: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 66: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 67: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 69: break;
          case 17: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 71: break;
          case 19: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 72: break;
          case 20: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 73: break;
          case 21: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 76: break;
          case 24: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 77: break;
          case 25: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 79: break;
          case 27: 
            { return OpenSCADTypes.INCLUDE_PATH;
            } 
            // fall through
          case 80: break;
          case 28: 
            { return OpenSCADTypes.INCLUDE_START;
            } 
            // fall through
          case 81: break;
          case 29: 
            { yybegin(YYINITIAL); return OpenSCADTypes.INCLUDE_END;
            } 
            // fall through
          case 82: break;
          case 30: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 83: break;
          case 31: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 84: break;
          case 32: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 85: break;
          case 33: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 86: break;
          case 34: 
            { return OpenSCADTypes.BUILTIN_EXPR;
            } 
            // fall through
          case 87: break;
          case 35: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 36: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 89: break;
          case 37: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 90: break;
          case 38: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 91: break;
          case 39: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 92: break;
          case 40: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 93: break;
          case 41: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 42: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 44: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 45: 
            { return OpenSCADTypes.BUILTIN_OBJ;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 47: 
            { return OpenSCADTypes.BUILTIN_OP;
            } 
            // fall through
          case 100: break;
          case 48: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 101: break;
          case 49: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 50: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 51: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 52: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
