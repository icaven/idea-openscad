/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad_highlighter.flex</tt>
 */
class OpenSCADHighlightingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\74\1\34\1\73\1\26\1\61\1\75\1\0\1\65"+
    "\1\66\1\11\1\32\1\57\1\60\1\30\1\10\2\27\1\54\7\27\1\64\1\56\1\6\1\25\1\7"+
    "\1\63\1\0\4\26\1\31\25\26\1\71\1\33\1\72\1\62\1\42\1\0\1\35\1\51\1\22\1\14"+
    "\1\17\1\20\1\40\1\41\1\24\1\50\1\45\1\16\1\12\1\21\1\13\1\47\1\53\1\37\1\36"+
    "\1\23\1\15\1\55\1\46\1\43\1\52\1\44\1\67\1\76\1\70\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\3\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\13\1\1\10\1\1\1\11\1\12\1\13\1\14\6\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\2"+
    "\1\3\1\6\1\34\1\3\1\35\1\36\4\0\1\37"+
    "\1\40\1\41\1\42\13\1\1\43\25\1\1\44\2\1"+
    "\1\45\1\1\1\11\1\0\1\14\23\1\1\46\1\47"+
    "\1\50\1\0\1\41\5\0\1\42\1\51\2\1\1\43"+
    "\7\1\1\52\5\1\1\53\23\1\1\11\2\0\22\1"+
    "\1\0\1\41\12\0\2\51\7\1\1\0\1\54\3\1"+
    "\1\55\1\56\1\57\7\1\1\60\12\1\1\11\1\43"+
    "\11\1\1\61\4\1\1\0\3\41\1\62\4\0\1\62"+
    "\2\0\1\42\1\0\5\1\1\63\3\1\1\64\1\56"+
    "\23\1\3\0\1\62\3\41\4\0\1\65\10\1\1\56"+
    "\5\1\1\66\1\61\5\1\3\0\2\41\3\0\20\1"+
    "\1\43\2\0\2\41\3\0\4\1\1\67\2\1\1\0"+
    "\1\70\5\1\2\0\2\41\2\0\7\1\2\0\1\62"+
    "\1\41\1\62\1\0\3\1\1\62\1\0\1\41\1\0"+
    "\3\1\1\0\1\1\1\61\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u013b\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u013b\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b"+
    "\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b"+
    "\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u013b"+
    "\0\u013b\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u013b\0\u013b\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u056a\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u056a\0\u12f3\0\u1332\0\u013b\0\u1371\0\u13b0"+
    "\0\u13ef\0\u013b\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569"+
    "\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761"+
    "\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u013b\0\u013b\0\u013b"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u0a56\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u056a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u056a\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u013b\0\u2a15\0\u2a54\0\u2a54\0\u2a93\0\u2ad2\0\u013b"+
    "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca"+
    "\0\u013b\0\u2d09\0\u2d48\0\u2d87\0\u056a\0\u056a\0\u056a\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u056a\0\u2f7f"+
    "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\u2370\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u056a\0\u346b\0\u34aa\0\u34e9"+
    "\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u191a\0\u3663\0\u36a2"+
    "\0\u36e1\0\u3720\0\u013b\0\u375f\0\u379e\0\u013b\0\u37dd\0\u381c"+
    "\0\u385b\0\u389a\0\u38d9\0\u3918\0\u056a\0\u3957\0\u3996\0\u39d5"+
    "\0\u056a\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e"+
    "\0\u285c\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137"+
    "\0\u056a\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0"+
    "\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u056a"+
    "\0\u4233\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662"+
    "\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a"+
    "\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52"+
    "\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a"+
    "\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42"+
    "\0\u4e81\0\u4ec0\0\u056a\0\u4eff\0\u4f3e\0\u4f7d\0\u013b\0\u4fbc"+
    "\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4"+
    "\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac"+
    "\0\u53eb\0\u542a\0\u5469\0\u35e5\0\u54a8\0\u36e1\0\u54e7\0\u5526"+
    "\0\u5565\0\u55a4\0\u3f3f\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df"+
    "\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\30\1\33\1\6"+
    "\1\34\1\35\1\36\1\37\1\30\1\40\5\30\1\41"+
    "\4\30\1\31\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\6\3\7\2\64\1\10"+
    "\1\11\1\65\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\30\1\33\1\6\1\34\1\35\1\36"+
    "\1\37\1\30\1\40\5\30\1\41\4\30\1\31\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\66\5\67\1\70\1\71\67\66\4\0\2\4"+
    "\2\0\1\72\105\0\1\73\1\0\1\74\3\0\1\75"+
    "\151\0\5\7\116\0\1\76\76\0\1\77\61\0\1\100"+
    "\1\101\77\0\1\30\1\102\1\30\1\103\6\30\1\104"+
    "\1\0\2\30\1\0\1\30\3\0\1\105\20\30\33\0"+
    "\6\30\1\106\4\30\1\0\2\30\1\0\1\30\3\0"+
    "\2\30\1\107\16\30\33\0\12\30\1\110\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\7\30\1\111\3\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\30\1\112\17\30"+
    "\33\0\1\30\1\113\3\30\1\114\1\30\1\115\2\30"+
    "\1\116\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\4\30\1\117\3\30\1\120\2\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\121\5\30\1\122\12\30\33\0\1\30"+
    "\1\123\1\30\1\124\1\125\6\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\126\20\30\33\0\1\30\1\127\11\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\1\30"+
    "\1\130\1\30\1\131\1\30\1\132\4\30\1\133\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\134\1\30\1\135"+
    "\10\30\1\136\3\30\33\0\5\30\1\137\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\140\1\30\1\141\16\30"+
    "\33\0\1\142\5\30\1\143\1\144\3\30\1\0\2\30"+
    "\1\0\1\30\3\0\1\30\1\145\17\30\46\0\1\146"+
    "\63\0\13\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\5\30\1\147\5\30\1\0\1\30\1\31\1\150"+
    "\1\147\3\0\17\30\1\31\1\30\50\0\1\150\24\0"+
    "\1\150\22\0\33\34\1\151\1\152\42\34\12\0\10\30"+
    "\1\153\1\154\1\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\30\1\155\12\30\1\156\4\30\33\0\3\30\1\157"+
    "\1\30\1\160\2\30\1\161\1\162\1\163\1\0\2\30"+
    "\1\0\1\30\3\0\12\30\1\164\3\30\1\165\2\30"+
    "\33\0\1\30\1\166\3\30\1\167\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\1\170\20\30\33\0\3\30\1\171"+
    "\7\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\1\30\1\172\11\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\173\1\30\1\174\16\30\33\0\5\30\1\175\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\46\0\1\176"+
    "\146\0\1\177\77\0\1\200\1\0\3\7\2\64\2\0"+
    "\1\201\76\0\1\202\1\101\65\0\6\66\2\0\70\66"+
    "\5\67\2\0\67\66\10\0\1\203\104\0\1\204\73\0"+
    "\1\205\64\0\3\206\1\75\1\206\4\0\13\207\1\0"+
    "\2\207\1\0\1\207\3\0\21\207\21\0\2\100\2\0"+
    "\73\100\11\210\1\211\65\210\12\0\2\30\1\212\10\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\4\30"+
    "\1\213\6\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\7\30\1\214\3\30\1\0\2\30\1\0\1\30"+
    "\3\0\2\30\1\215\16\30\33\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\6\30\1\115\12\30\33\0\6\30"+
    "\1\216\4\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\2\30\1\115\10\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\6\30\1\217\4\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\2\30\1\220\7\30"+
    "\1\221\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\5\30\1\222\5\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\1\30\1\223\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\3\30\1\115\15\30\33\0\7\30\1\115"+
    "\1\30\1\224\1\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\7\30\1\225\3\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\4\30\1\226\6\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\30\1\227\17\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\4\30\1\230"+
    "\14\30\33\0\10\30\1\231\2\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\12\30\1\115\6\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\232\16\30\33\0"+
    "\7\30\1\233\3\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\1\30\1\234\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\4\30\1\235\6\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\236\16\30\33\0"+
    "\4\30\1\237\2\30\1\240\3\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\30\1\115\17\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\14\30\1\241\4\30\33\0"+
    "\12\30\1\242\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\2\30"+
    "\1\243\16\30\33\0\1\30\1\244\11\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\12\30\1\245\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\115\16\30\33\0"+
    "\4\30\1\246\6\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\6\30\1\247\12\30\33\0\7\30\1\115\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\3\30\1\250"+
    "\7\30\1\0\2\30\1\0\1\30\3\0\1\251\20\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\12\30"+
    "\1\252\6\30\33\0\10\30\1\253\1\254\1\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\5\30\1\255\13\30\33\0"+
    "\13\30\1\0\1\30\1\256\1\0\1\30\1\257\2\0"+
    "\17\30\1\256\1\30\2\0\1\257\35\0\1\260\7\0"+
    "\1\150\1\0\1\260\22\0\1\150\22\0\77\34\12\0"+
    "\1\30\1\156\11\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\261\20\30\33\0\12\30\1\140\1\0\2\30\1\0"+
    "\1\30\3\0\1\30\1\262\17\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\30\1\115\17\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\2\30\1\263"+
    "\16\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\264\20\30\33\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\1\265\20\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\115\16\30\33\0\7\30\1\115"+
    "\3\30\1\0\2\30\1\0\1\30\3\0\3\30\1\140"+
    "\15\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\4\30\1\266\14\30\33\0\3\30\1\267\7\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\270\16\30\33\0"+
    "\3\30\1\271\5\30\1\272\1\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\7\30\1\273\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\30\1\274\17\30\33\0"+
    "\7\30\1\275\3\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\4\30\1\276\6\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\4\30\1\277\6\30\1\0"+
    "\2\30\1\0\1\30\3\0\11\30\1\115\7\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\2\30\1\300"+
    "\16\30\33\0\1\30\1\301\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\302\16\30\31\0\1\303\66\0"+
    "\1\202\1\304\1\305\1\306\1\202\1\304\71\202\2\203"+
    "\1\4\1\307\73\203\15\0\1\310\105\0\1\311\53\0"+
    "\1\312\1\313\1\312\1\314\1\315\4\0\13\207\1\0"+
    "\2\207\1\0\1\207\3\0\21\207\21\0\11\210\1\316"+
    "\65\210\10\317\1\320\1\211\65\317\12\0\3\30\1\321"+
    "\7\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\11\30\1\322\1\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\10\30\1\323\10\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\237\16\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\30\1\324\17\30\33\0"+
    "\6\30\1\325\4\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\5\30\1\326\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\1\30\1\327\11\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\22\0\5\330\1\331"+
    "\3\0\13\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\10\30"+
    "\1\332\10\30\33\0\5\30\1\333\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\12\30\1\334\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\5\30\1\335"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\1\30\1\336\11\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\4\30\1\337\14\30\33\0\10\30\1\340\2\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\1\30\1\162"+
    "\11\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\1\30\1\341"+
    "\17\30\33\0\1\115\12\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\1\30\1\342\11\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\10\30\1\343\2\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\5\30"+
    "\1\336\5\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\4\30\1\115\6\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\10\30\1\344\2\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\1\30\1\156\17\30\33\0\4\30"+
    "\1\345\6\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\12\30\1\346\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\11\30\1\336\1\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\5\30\1\347\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\7\30\1\350"+
    "\3\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\1\30\1\351\11\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\4\30\1\352\6\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\5\30\1\353\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\3\30\1\354"+
    "\1\355\1\30\1\356\1\357\3\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\30\1\360\12\30\1\361\4\30\33\0"+
    "\13\30\1\0\1\30\1\256\1\0\1\30\3\0\17\30"+
    "\1\256\1\30\50\0\1\362\24\0\1\362\51\0\1\362"+
    "\2\0\1\257\21\0\1\362\3\0\1\257\30\0\7\30"+
    "\1\363\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\5\30\1\364\4\30\1\365\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\6\30\1\366\4\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\367\16\30\33\0"+
    "\4\30\1\370\6\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\5\30\1\371\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\1\371\20\30\33\0\11\30\1\115\1\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\7\30"+
    "\1\107\3\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\1\372"+
    "\20\30\33\0\2\30\1\373\10\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\12\30\1\374\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\2\30\1\156\10\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\4\30"+
    "\1\375\6\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\15\30"+
    "\1\376\3\30\33\0\5\30\1\377\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\13\30\1\u0100\5\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\30\1\u0101\17\30"+
    "\21\0\1\303\1\u0102\1\305\1\306\1\303\1\u0102\71\303"+
    "\1\202\1\304\1\305\1\306\2\304\4\202\1\u0103\5\u0104"+
    "\1\u0105\4\u0104\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104"+
    "\21\202\1\0\3\u0107\2\305\2\0\1\201\1\0\1\u0108"+
    "\5\u0109\1\u010a\4\u0109\1\u010b\2\u0109\1\0\1\u0109\3\0"+
    "\21\u0109\22\0\1\u0107\1\305\1\u0107\2\305\2\0\1\201"+
    "\1\0\1\u0108\5\u0109\1\u010a\4\u0109\1\u010b\2\u0109\1\0"+
    "\1\u0109\3\0\21\u0109\23\0\1\4\1\0\2\4\2\0"+
    "\1\72\102\0\1\u010c\105\0\1\u010d\56\0\1\312\74\0"+
    "\1\312\1\313\1\312\1\314\1\315\71\0\10\210\1\u010e"+
    "\1\316\65\210\11\317\1\u010f\65\317\12\0\4\30\1\u0110"+
    "\6\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\1\u0111\12\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\1\30\1\u0112\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\5\30\1\u0113\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\5\30\1\u0114\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\6\30"+
    "\1\u0115\4\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\7\30\1\375\3\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\22\0\5\330\1\331\102\0\3\30\1\122"+
    "\7\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\1\u0116\20\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\12\30"+
    "\1\u0117\6\30\33\0\11\30\1\u0118\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\5\30\1\u0119\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\375\16\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\1\270"+
    "\20\30\33\0\4\30\1\241\6\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\2\30\1\u011a\10\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\7\30\1\u011b"+
    "\3\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\1\30\1\u011c"+
    "\17\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\2\30\1\u011d\16\30\33\0\3\30\1\u011e\7\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\u011f\16\30\33\0"+
    "\7\30\1\u0120\3\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\12\30\1\u0121\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\3\30\1\u0122\7\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\3\30\1\236\7\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\11\30"+
    "\1\u0123\1\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\1\30\1\u0124\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\17\30\1\115\1\30\33\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\2\30\1\247\16\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\3\30\1\u0125\15\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\1\u0126"+
    "\20\30\33\0\10\30\1\u0127\2\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\5\30\1\375\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\241\16\30\33\0"+
    "\11\30\1\u0128\1\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\5\30\1\342\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\7\30\1\370\11\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\3\30\1\u0129\1\u012a\14\30"+
    "\33\0\7\30\1\u012b\3\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\5\30\1\u012c\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\12\30\1\u012d\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\21\0\1\303\1\u0102"+
    "\1\305\1\306\2\u0102\4\303\1\u012e\5\u012f\1\u0130\4\u012f"+
    "\1\u0131\2\u012f\1\303\1\u012f\3\303\21\u012f\21\303\1\202"+
    "\1\304\1\305\1\306\1\u0132\1\304\4\202\1\u0104\1\u0133"+
    "\11\u0104\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104\22\202"+
    "\1\304\1\305\1\306\1\u0132\1\304\4\202\13\u0104\1\u0106"+
    "\2\u0104\1\202\1\u0104\3\202\21\u0104\22\202\1\304\1\305"+
    "\1\306\1\u0132\1\304\4\202\3\u0104\1\u0134\7\u0104\1\u0106"+
    "\2\u0104\1\202\1\u0104\3\202\21\u0104\21\202\1\0\5\u0107"+
    "\17\0\1\u010b\52\0\5\u0107\4\0\1\u0109\1\u0135\11\u0109"+
    "\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109\22\0\5\u0107"+
    "\4\0\13\u0109\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109"+
    "\22\0\5\u0107\4\0\3\u0109\1\u0136\7\u0109\1\u010b\2\u0109"+
    "\1\0\1\u0109\3\0\21\u0109\34\0\1\u0137\105\0\1\u0138"+
    "\54\0\10\317\1\320\1\u010f\65\317\12\0\5\30\1\u0139"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\1\u013a\20\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\11\30"+
    "\1\u013b\7\30\33\0\11\30\1\375\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\13\30\1\0\2\30"+
    "\1\0\1\30\3\0\2\30\1\u013c\16\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\u013d\16\30"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\1\30"+
    "\1\241\17\30\33\0\12\30\1\u013e\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\u013f\16\30\33\0\2\30\1\u0140"+
    "\10\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\4\30\1\u0141\6\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\11\30\1\u0142\1\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\2\30\1\u0143\10\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\1\30\1\u0144\17\30\33\0"+
    "\2\30\1\u0145\10\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\30\1\270\17\30\33\0\7\30\1\u0146\3\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\2\30\1\u0147\16\30\33\0"+
    "\1\30\1\242\11\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\7\30\1\u0148\3\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\10\30\1\241\2\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\4\30\1\115\14\30\33\0"+
    "\5\30\1\u0149\5\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\1\30\1\u014a\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\5\30\1\u014b\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\11\30\1\u014c"+
    "\1\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\10\30\1\u014d\2\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\1\30\1\u014e\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\21\0\1\303\1\u0102\1\305\1\306"+
    "\1\u014f\1\u0102\4\303\1\u012f\1\u0150\11\u012f\1\u0131\2\u012f"+
    "\1\303\1\u012f\3\303\21\u012f\22\303\1\u0102\1\305\1\306"+
    "\1\u014f\1\u0102\4\303\13\u012f\1\u0131\2\u012f\1\303\1\u012f"+
    "\3\303\21\u012f\22\303\1\u0102\1\305\1\306\1\u014f\1\u0102"+
    "\4\303\3\u012f\1\u0151\7\u012f\1\u0131\2\u012f\1\303\1\u012f"+
    "\3\303\21\u012f\21\303\1\202\1\304\1\305\1\306\1\u0132"+
    "\1\304\17\202\1\u0106\52\202\1\304\1\305\1\306\1\u0132"+
    "\1\304\4\202\2\u0104\1\u0152\10\u0104\1\u0106\2\u0104\1\202"+
    "\1\u0104\3\202\21\u0104\22\202\1\304\1\305\1\306\1\u0132"+
    "\1\304\4\202\7\u0104\1\u0153\3\u0104\1\u0106\2\u0104\1\202"+
    "\1\u0104\3\202\21\u0104\21\202\1\0\5\u0107\4\0\2\u0109"+
    "\1\u0154\10\u0109\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109"+
    "\22\0\5\u0107\4\0\7\u0109\1\u0155\3\u0109\1\u010b\2\u0109"+
    "\1\0\1\u0109\3\0\21\u0109\33\0\1\314\105\0\1\u0156"+
    "\67\0\11\30\1\u0157\1\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\1\30\1\u0158\17\30\33\0\5\30\1\u0159\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\5\30\1\u015a\13\30"+
    "\33\0\1\30\1\u015b\11\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\5\30\1\u014a\5\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\5\30\1\u015c\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\1\u015d\20\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\5\30\1\u015e"+
    "\13\30\33\0\5\30\1\u015f\5\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\5\30\1\u0160\5\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\5\30\1\u0161"+
    "\5\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\10\30\1\u0162\2\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\12\30\1\u0163\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\7\30\1\336\3\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\2\30\1\u0164\10\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\5\30\1\u0165\13\30"+
    "\33\0\11\30\1\u0166\1\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\7\30\1\u0167\3\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\21\0\1\303\1\u0102\1\305"+
    "\1\306\1\u014f\1\u0102\17\303\1\u0131\52\303\1\u0102\1\305"+
    "\1\306\1\u014f\1\u0102\4\303\2\u012f\1\u0168\10\u012f\1\u0131"+
    "\2\u012f\1\303\1\u012f\3\303\21\u012f\22\303\1\u0102\1\305"+
    "\1\306\1\u014f\1\u0102\4\303\7\u012f\1\u0169\3\u012f\1\u0131"+
    "\2\u012f\1\303\1\u012f\3\303\21\u012f\21\303\1\202\1\304"+
    "\1\305\1\306\1\u0132\1\304\4\202\3\u0104\1\u016a\7\u0104"+
    "\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104\22\202\1\304"+
    "\1\305\1\306\1\u0132\1\304\4\202\10\u0104\1\u016b\2\u0104"+
    "\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104\21\202\1\0"+
    "\5\u0107\4\0\3\u0109\1\u016c\7\u0109\1\u010b\2\u0109\1\0"+
    "\1\u0109\3\0\21\u0109\22\0\5\u0107\4\0\10\u0109\1\u016d"+
    "\2\u0109\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109\36\0"+
    "\1\u016e\73\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\2\30\1\u016f\16\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\10\30\1\u0170\10\30\33\0\7\30\1\u0171"+
    "\3\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\5\30\1\u0172\5\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\7\30\1\u0173\3\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\336\16\30\33\0\11\30\1\370"+
    "\1\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\2\30\1\u0174\10\30\1\0\2\30\1\0\1\30\3\0"+
    "\1\30\1\u0175\17\30\22\0\5\u0176\1\u0177\3\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\10\30"+
    "\1\u0178\2\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\6\30\1\115\4\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\11\30\1\u0179\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\7\30\1\u017a\3\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\13\30"+
    "\1\0\2\30\1\0\1\30\3\0\2\30\1\u0129\16\30"+
    "\33\0\1\u017b\12\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\12\30\1\221\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\5\30\1\u017c\13\30\21\0\1\303\1\u0102\1\305"+
    "\1\306\1\u014f\1\u0102\4\303\3\u012f\1\u017d\7\u012f\1\u0131"+
    "\2\u012f\1\303\1\u012f\3\303\21\u012f\22\303\1\u0102\1\305"+
    "\1\306\1\u014f\1\u0102\4\303\10\u012f\1\u017e\2\u012f\1\u0131"+
    "\2\u012f\1\303\1\u012f\3\303\21\u012f\21\303\1\202\1\304"+
    "\1\305\1\306\1\u0132\1\304\4\202\4\u0104\1\u017f\6\u0104"+
    "\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104\22\202\1\304"+
    "\1\305\1\306\1\u0132\1\304\4\202\11\u0104\1\u0180\1\u0104"+
    "\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104\21\202\1\0"+
    "\5\u0107\4\0\4\u0109\1\u0181\6\u0109\1\u010b\2\u0109\1\0"+
    "\1\u0109\3\0\21\u0109\22\0\5\u0107\4\0\11\u0109\1\u0182"+
    "\1\u0109\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109\41\0"+
    "\1\314\70\0\12\30\1\u0183\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\12\30\1\375\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\10\30\1\370\2\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\13\30\1\0"+
    "\2\30\1\0\1\30\3\0\6\30\1\u0184\12\30\33\0"+
    "\13\30\1\0\2\30\1\0\1\30\3\0\6\30\1\u0185"+
    "\12\30\33\0\11\30\1\u0186\1\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\22\0\5\u0176\1\u0177\102\0\11\30"+
    "\1\u0187\1\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\12\30\1\u0188\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\13\30\1\0\2\30\1\0\1\30\3\0"+
    "\3\30\1\115\15\30\33\0\1\30\1\u0189\11\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\33\0\7\30\1\357"+
    "\3\30\1\0\2\30\1\0\1\30\3\0\21\30\21\0"+
    "\1\303\1\u0102\1\305\1\306\1\u014f\1\u0102\4\303\4\u012f"+
    "\1\u018a\6\u012f\1\u0131\2\u012f\1\303\1\u012f\3\303\21\u012f"+
    "\22\303\1\u0102\1\305\1\306\1\u014f\1\u0102\4\303\11\u012f"+
    "\1\u018b\1\u012f\1\u0131\2\u012f\1\303\1\u012f\3\303\21\u012f"+
    "\21\303\1\202\1\304\1\305\1\306\1\u0132\1\304\4\202"+
    "\5\u0104\1\u018c\5\u0104\1\u0106\2\u0104\1\202\1\u0104\3\202"+
    "\21\u0104\22\202\1\304\1\305\1\306\1\u0132\1\304\4\202"+
    "\12\u0104\1\u018d\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104"+
    "\21\202\1\0\5\u0107\4\0\5\u0109\1\u018e\5\u0109\1\u010b"+
    "\2\u0109\1\0\1\u0109\3\0\21\u0109\22\0\5\u0107\4\0"+
    "\12\u0109\1\u018f\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109"+
    "\33\0\13\30\1\0\2\30\1\0\1\30\3\0\6\30"+
    "\1\375\12\30\33\0\11\30\1\u0190\1\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\6\30\1\336\4\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\4\30"+
    "\1\336\6\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\33\0\12\30\1\u0191\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\33\0\1\30\1\140\11\30\1\0\2\30\1\0"+
    "\1\30\3\0\21\30\33\0\2\30\1\u0192\10\30\1\0"+
    "\2\30\1\0\1\30\3\0\21\30\21\0\1\303\1\u0102"+
    "\1\305\1\306\1\u014f\1\u0102\4\303\5\u012f\1\u0193\5\u012f"+
    "\1\u0131\2\u012f\1\303\1\u012f\3\303\21\u012f\22\303\1\u0102"+
    "\1\305\1\306\1\u014f\1\u0102\4\303\12\u012f\1\u0194\1\u0131"+
    "\2\u012f\1\303\1\u012f\3\303\21\u012f\21\303\1\202\1\304"+
    "\1\305\1\306\1\u0132\1\304\4\202\1\u0104\1\u0195\11\u0104"+
    "\1\u0106\2\u0104\1\202\1\u0104\3\202\21\u0104\21\202\1\0"+
    "\5\u0107\4\0\1\u0109\1\u0196\11\u0109\1\u010b\2\u0109\1\0"+
    "\1\u0109\3\0\21\u0109\33\0\13\30\1\0\2\30\1\0"+
    "\1\30\3\0\2\30\1\u0197\16\30\33\0\1\30\1\u0198"+
    "\11\30\1\0\2\30\1\0\1\30\3\0\21\30\33\0"+
    "\3\30\1\u0199\7\30\1\0\2\30\1\0\1\30\3\0"+
    "\21\30\21\0\1\303\1\u0102\1\305\1\306\1\u014f\1\u0102"+
    "\4\303\1\u012f\1\u019a\11\u012f\1\u0131\2\u012f\1\303\1\u012f"+
    "\3\303\21\u012f\21\303\1\202\1\304\1\305\1\306\1\u0132"+
    "\1\304\4\202\7\u0104\1\u018c\3\u0104\1\u0106\2\u0104\1\202"+
    "\1\u0104\3\202\21\u0104\21\202\1\0\5\u0107\4\0\7\u0109"+
    "\1\u018e\3\u0109\1\u010b\2\u0109\1\0\1\u0109\3\0\21\u0109"+
    "\33\0\3\30\1\u019b\7\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\7\30\1\u019c\3\30\1\0\2\30"+
    "\1\0\1\30\3\0\21\30\33\0\4\30\1\u019d\6\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\21\0\1\303"+
    "\1\u0102\1\305\1\306\1\u014f\1\u0102\4\303\7\u012f\1\u0193"+
    "\3\u012f\1\u0131\2\u012f\1\303\1\u012f\3\303\21\u012f\21\303"+
    "\12\0\2\30\1\370\10\30\1\0\2\30\1\0\1\30"+
    "\3\0\21\30\33\0\13\30\1\0\2\30\1\0\1\30"+
    "\3\0\5\30\1\u019e\13\30\33\0\5\30\1\115\5\30"+
    "\1\0\2\30\1\0\1\30\3\0\21\30\33\0\6\30"+
    "\1\237\4\30\1\0\2\30\1\0\1\30\3\0\21\30"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\3\0\1\11\4\1\1\11\17\1\1\11\7\1"+
    "\16\11\7\1\2\11\4\0\2\11\46\1\1\11\2\1"+
    "\1\0\1\11\23\1\3\11\1\0\2\1\2\0\1\1"+
    "\1\0\47\1\2\0\22\1\1\0\1\1\5\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\7\1\1\0"+
    "\1\11\50\1\1\0\4\1\4\0\1\11\2\0\1\11"+
    "\1\0\36\1\3\0\4\1\4\0\26\1\3\0\2\1"+
    "\3\0\21\1\2\0\2\1\3\0\7\1\1\0\1\11"+
    "\5\1\2\0\2\1\2\0\7\1\2\0\3\1\1\0"+
    "\4\1\1\0\1\1\1\0\3\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 57: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 59: break;
          case 4: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 61: break;
          case 6: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 62: break;
          case 7: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 63: break;
          case 8: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 64: break;
          case 9: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 65: break;
          case 10: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 66: break;
          case 11: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 67: break;
          case 12: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 68: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 69: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 70: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 71: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 72: break;
          case 17: 
            { return OpenSCADTypes.EXP;
            } 
            // fall through
          case 73: break;
          case 18: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 74: break;
          case 19: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 75: break;
          case 20: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 76: break;
          case 21: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 77: break;
          case 22: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 78: break;
          case 23: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 79: break;
          case 24: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 80: break;
          case 25: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 81: break;
          case 26: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 82: break;
          case 27: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 83: break;
          case 28: 
            { return OpenSCADTypes.IMPORT_PATH;
            } 
            // fall through
          case 84: break;
          case 29: 
            { return OpenSCADTypes.IMPORT_START;
            } 
            // fall through
          case 85: break;
          case 30: 
            { yybegin(YYINITIAL); return OpenSCADTypes.IMPORT_END;
            } 
            // fall through
          case 86: break;
          case 31: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 87: break;
          case 32: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 88: break;
          case 33: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 89: break;
          case 34: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 90: break;
          case 35: 
            { return OpenSCADTypes.BUILTIN_EXPR;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 37: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 93: break;
          case 38: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 94: break;
          case 39: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 95: break;
          case 40: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 96: break;
          case 41: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 43: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 44: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(IMPORT_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 45: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 46: 
            { return OpenSCADTypes.BUILTIN_OBJ;
            } 
            // fall through
          case 102: break;
          case 47: 
            { return OpenSCADTypes.EACH_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 48: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 49: 
            { return OpenSCADTypes.BUILTIN_OP;
            } 
            // fall through
          case 105: break;
          case 50: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 106: break;
          case 51: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 52: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 53: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return OpenSCADTypes.ASSIGN_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 55: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(IMPORT_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
